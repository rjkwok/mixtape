{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"play",
				"player_id"
			],
			[
				"packages",
				"packages_saved"
			],
			[
				"time_til",
				"time_til_rescue"
			],
			[
				"seconds",
				"seconds_string"
			],
			[
				"time",
				"time_til_rescue"
			],
			[
				"asteroid",
				"asteroid_id"
			],
			[
				"atta",
				"attached_id_2"
			],
			[
				"attached",
				"attached_id"
			],
			[
				"apply",
				"apply_to_ob"
			],
			[
				"potenti",
				"potential_energy_2"
			],
			[
				"getP",
				"getProperties"
			],
			[
				"object",
				"object_entry"
			],
			[
				"relative",
				"relative_position"
			],
			[
				"build",
				"build_sprite"
			],
			[
				"target",
				"target_radius"
			],
			[
				"start",
				"start_location"
			],
			[
				"sector",
				"sector_id"
			],
			[
				"return",
				"return_color"
			],
			[
				"retur",
				"return_color"
			],
			[
				"ret",
				"return_colour"
			],
			[
				"ai",
				"ai_client"
			],
			[
				"scrol",
				"menu_scroller"
			],
			[
				"player",
				"player_in_game"
			],
			[
				"pla",
				"player_in_game"
			],
			[
				"server",
				"server_thread"
			],
			[
				"sp_text",
				"sp_text_bounds"
			],
			[
				"setC",
				"setCharacterSize"
			],
			[
				"setOutli",
				"setOutlineColor"
			],
			[
				"men",
				"menu_scroller"
			],
			[
				"scr",
				"scroll_countdown"
			],
			[
				"text",
				"text_bounds"
			],
			[
				"menu",
				"menu_id"
			],
			[
				"win",
				"win_lose_tie"
			],
			[
				"final",
				"final_update"
			],
			[
				"match",
				"match_finished"
			],
			[
				"upd",
				"updateNumbers"
			],
			[
				"frame",
				"frame_colour"
			],
			[
				"sprite",
				"sprite_colour"
			],
			[
				"main",
				"main_sprite"
			],
			[
				"tiles",
				"tiles_for_sale"
			],
			[
				"tile",
				"tiles_for_sale"
			],
			[
				"cool",
				"cooldown_2"
			],
			[
				"coold",
				"cooldown_2"
			],
			[
				"hidde",
				"hidden_mode"
			],
			[
				"null",
				"nullify_strength"
			],
			[
				"other",
				"other_ship"
			],
			[
				"Stre",
				"StreamNode"
			],
			[
				"end",
				"end_nodes"
			],
			[
				"ships",
				"ships_that_transmit"
			],
			[
				"other_",
				"other_ship_0"
			],
			[
				"sh",
				"ships_that_transmit"
			],
			[
				"number",
				"number_of_intel_hubs"
			],
			[
				"place",
				"placeShip"
			],
			[
				"sele",
				"selected_for_sale"
			],
			[
				"selec",
				"selected_for_sale"
			],
			[
				"curren",
				"current_round"
			],
			[
				"selected",
				"selected_hand"
			],
			[
				"change",
				"changeTurn"
			],
			[
				"rand",
				"random_index"
			],
			[
				"bottom",
				"bottom_left_hand"
			],
			[
				"strengt",
				"strength_text"
			],
			[
				"new",
				"new_graphic"
			],
			[
				"streng",
				"strength_colour"
			],
			[
				"card",
				"card_colour"
			],
			[
				"name",
				"name_colour"
			],
			[
				"ship",
				"ship_id"
			],
			[
				"Mat",
				"MatchServer"
			],
			[
				"shi",
				"ship_id"
			],
			[
				"flanke",
				"flanked_friends"
			],
			[
				"fl",
				"flanked_friends"
			],
			[
				"base",
				"base_per_enemy"
			],
			[
				"does",
				"doesSocketExist"
			],
			[
				"anchor",
				"anchor_sprite"
			],
			[
				"setTe",
				"setTexture"
			],
			[
				"socket",
				"socket_spacing"
			],
			[
				"read",
				"read_ip"
			],
			[
				"calculat",
				"calculateStrengths"
			],
			[
				"update",
				"updateStrengths"
			],
			[
				"mat",
				"MatchServer"
			],
			[
				"should",
				"should_notify"
			],
			[
				"listen",
				"listenForServerCommand"
			],
			[
				"Matc",
				"MatchServer"
			],
			[
				"client",
				"client_1"
			],
			[
				"score",
				"score_update"
			],
			[
				"getSt",
				"getStrengthA"
			],
			[
				"Match",
				"MatchClient"
			],
			[
				"liste",
				"listenForClientCommand"
			],
			[
				"in_",
				"match_in_progress"
			],
			[
				"initi",
				"initialize_1"
			],
			[
				"core",
				"core_ship_2_tx"
			],
			[
				"user",
				"username_1"
			],
			[
				"command",
				"command_str"
			],
			[
				"remove",
				"removeShip"
			],
			[
				"synch",
				"synchronizeMap"
			],
			[
				"board",
				"board_height"
			],
			[
				"back",
				"background_tx"
			],
			[
				"init",
				"initalizeMatch"
			],
			[
				"typ",
				"type_id"
			],
			[
				"turn",
				"turn_packet"
			],
			[
				"first",
				"firstRowOnly"
			],
			[
				"setText",
				"setTextureRect"
			],
			[
				"core_",
				"core_sprite_b"
			],
			[
				"curre",
				"current_round"
			],
			[
				"is_",
				"is_dead_open"
			],
			[
				"discard",
				"discarded_a"
			],
			[
				"total",
				"total_score_b"
			],
			[
				"current",
				"current_score_b"
			],
			[
				"curr",
				"current_round"
			],
			[
				"att",
				"attack_button"
			],
			[
				"col",
				"column_index"
			],
			[
				"add",
				"addOneToColumn"
			],
			[
				"double",
				"doubleSameType"
			],
			[
				"type",
				"type_id"
			],
			[
				"types",
				"types_to_get"
			],
			[
				"mod",
				"modifiers"
			],
			[
				"is",
				"is_deck_open"
			],
			[
				"dead",
				"dead_bounds"
			],
			[
				"score_",
				"score_text_a"
			],
			[
				"setOutline",
				"setOutlineThickness"
			],
			[
				"setF",
				"setFillColor"
			],
			[
				"getText",
				"getTextureRect"
			],
			[
				"key",
				"keyWasReleased"
			],
			[
				"deck",
				"deck_bounds"
			],
			[
				"getTe",
				"getTexture"
			],
			[
				"side",
				"side_length_other"
			],
			[
				"bott",
				"bottom_left_deck"
			],
			[
				"side_",
				"side_length_other"
			],
			[
				"side_length_",
				"side_length_hand"
			]
		]
	},
	"buffers":
	[
		{
			"file": "makefile",
			"settings":
			{
				"buffer_size": 3125,
				"line_ending": "Windows"
			}
		},
		{
			"file": "saves/station_a/0_0.xml",
			"settings":
			{
				"buffer_size": 47161,
				"line_ending": "Windows"
			}
		},
		{
			"file": "field.h",
			"settings":
			{
				"buffer_size": 1559,
				"line_ending": "Windows"
			}
		},
		{
			"file": "main.h",
			"settings":
			{
				"buffer_size": 1001,
				"line_ending": "Windows"
			}
		},
		{
			"file": "util.h",
			"settings":
			{
				"buffer_size": 2115,
				"line_ending": "Windows"
			}
		},
		{
			"file": "util.cpp",
			"settings":
			{
				"buffer_size": 9329,
				"line_ending": "Windows"
			}
		},
		{
			"file": "session.cpp",
			"settings":
			{
				"buffer_size": 148990,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 81 files for \"!free_build\"\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\session.cpp:\n 1848          inventory_bounds = FloatRect(0,0,0,0);\n 1849          if(inventory_open){\n 1850:             if(!free_build){\n 1851                  for(int i = 1; i <= player->contents.size(); i++){\n 1852                      RectangleShape slot;\n ....\n 2148  \n 2149      if(input.keys_released.count(\"c\") != 0){\n 2150:         free_build = !free_build;\n 2151      }\n 2152  \n ....\n 2250  \n 2251              //time_til_asteroid -= dt;\n 2252:             if(time_til_asteroid <= 0 && !free_build){\n 2253  \n 2254                  int u_bound = 15 + (rand() % 20);\n\n3 matches in 1 file\n\n\nSearching 81 files for \"free_build\"\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\session.cpp:\n 1848          inventory_bounds = FloatRect(0,0,0,0);\n 1849          if(inventory_open){\n 1850:             if(!free_build){\n 1851                  for(int i = 1; i <= player->contents.size(); i++){\n 1852                      RectangleShape slot;\n ....\n 1947          else{\n 1948  \n 1949:             if(free_build){\n 1950                  RectangleShape slot;\n 1951                  slot.setSize(Vector2f(80,80));\n ....\n 2039                      gui_captions.push_back(Caption(toolbox_types[i], \"font1\", Vector2f(input.fixed_mouse.x + 40, input.fixed_mouse.y - 5), 28, Color(255,255,255,205), \"left\"));\n 2040  \n 2041:                     if(free_build){\n 2042                          if(input.lmb_released){\n 2043                              if(gui_hovering_item_id != \"\" && getSector(sector_id)->items[gui_hovering_item_id]->properties->name == toolbox_types[i]){\n ....\n 2148  \n 2149      if(input.keys_released.count(\"c\") != 0){\n 2150:         free_build = !free_build;\n 2151      }\n 2152  \n ....\n 2250  \n 2251              //time_til_asteroid -= dt;\n 2252:             if(time_til_asteroid <= 0 && !free_build){\n 2253  \n 2254                  int u_bound = 15 + (rand() % 20);\n ....\n 2289          }\n 2290          updateGUI();\n 2291:         getSector(sector_id)->getEnt(player_id)->ghost = free_build;\n 2292          //\n 2293      }\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\session.h:\n   43      vector<FloatRect> gui_slot_boxes;\n   44      vector<string*> gui_slot_contents;\n   45:     bool free_build = false;\n   46      bool inventory_open = false;\n   47      vector<string> toolbox_types;\n\n8 matches across 2 files\n\n\nSearching 81 files for \"storage_id\"\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\entity.cpp:\n  963      if(contents[slot_index]==\"\" and getSector(sector_id)->items.count(item_id)!=0){\n  964          contents[slot_index] = item_id;\n  965:         getSector(sector_id)->items[item_id]->storage_id = id;\n  966          return true;\n  967      }\n  ...\n  988      if(index!=0){\n  989          if(getSector(sector_id)->items.count(contents[index])!=0){\n  990:             getSector(sector_id)->items[contents[index]]->storage_id = \"\";\n  991          }\n  992          contents[index] = \"\";\n  ...\n 1018  //            string item_id = registerNewItem(sector_id, parser->first);\n 1019  //            shared_ptr<Item> item = getSector(sector_id)->items[item_id];\n 1020: //            item->storage_id = makeNewScrap(sector_id, createUniqueId(), new_coords.x,new_coords.y);\n 1021: //            getSector(sector_id)->scrap[item->storage_id].lock()->setItem(item->id);\n 1022: //            getSector(sector_id)->scrap[item->storage_id].lock()->sprite.setRotation(sprite.getRotation());\n 1023  //\n 1024  //            double rot_amount = rand()%100;\n 1025  //            if(rand() % 100<50){rot_amount*=-1;}\n 1026: //            getSector(sector_id)->scrap[item->storage_id].lock()->setVelocity((rot_amount)+getVelocity().x/10,(rot_amount)+getVelocity().y/10);\n 1027: //            getSector(sector_id)->scrap[item->storage_id].lock()->setRotationalVelocity(getRotationalVelocity()+(rot_amount));\n 1028  //\n 1029  //        }\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\item.cpp:\n   16  }\n   17  \n   18: bool Item::putInStorage(string new_storage_id){\n   19  \n   20:     string old_storage_id = storage_id;\n   21  \n   22:     if(shared_ptr<Entity> old_storage = getSector(sector_id)->getEnt(old_storage_id)){\n   23          old_storage->removeFromContents(id);\n   24      }\n   25  \n   26:     if(shared_ptr<Entity> new_storage = getSector(sector_id)->getEnt(new_storage_id)){\n   27          if(new_storage->addToContents(id)){\n   28              return true;\n   ..\n   30      }\n   31      //else\n   32:     if(shared_ptr<Entity> old_storage = getSector(sector_id)->getEnt(old_storage_id)){\n   33          old_storage->addToContents(id);\n   34      }\n   ..\n   39  //bool Item::putInWorld(Vector2f new_coords){\n   40  //\n   41: //    string old_storage_id = storage_id;\n   42  //\n   43: //    if(shared_ptr<Entity> old_storage = getSector(sector_id)->getEnt(old_storage_id)){\n   44  //        old_storage->removeFromContents(id);\n   45  //    }\n   46  //\n   47: //    storage_id = makeNewScrap(sector_id,createUniqueId(),new_coords.x,new_coords.y);\n   48: //    if(getSector(sector_id)->scrap[storage_id].lock()->setItem(id)){\n   49  //\n   50  //        return true;\n   ..\n   52  //    else{\n   53  //\n   54: //        if(shared_ptr<Entity> old_storage = getSector(sector_id)->getEnt(old_storage_id)){\n   55  //            old_storage->addToContents(id);\n   56  //        }\n   ..\n   76  //}\n   77  \n   78: void makeNewItemInStorage(string sector_id, string item_id, string type, string storage_id){\n   79  \n   80      registerNewItem(sector_id, item_id, type);\n   81      shared_ptr<Item> item = getSector(sector_id)->items[item_id];\n   82  \n   83:     item->putInStorage(storage_id);\n   84  }\n   85  \n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\item.h:\n   17      shared_ptr<Properties> properties; //name, parts that make it up, visual, about\n   18  \n   19:     bool putInStorage(string new_storage_id);\n   20     // bool putInWorld(Vector2f new_coords);\n   21  \n   22      string sector_id;\n   23:     string storage_id = \"\";\n   24  };\n   25  \n   26  //void makeNewItemInWorld(string sector_id, string type, string item_id, Vector2f new_coords);\n   27: void makeNewItemInStorage(string sector_id, string item_id, string type, string storage_id);\n   28  \n   29  \n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\terminal.cpp:\n   36  void SwitchChip::process(double dt){\n   37  \n   38:     shared_ptr<Terminal> terminal = getSector(sector_id)->terminals[storage_id].lock();\n   39  \n   40      RectangleShape button_A = createRectangle(Vector2f(600, 335), Vector2f(100,50), 3, Color(0,0,0,0), Color(255,255,255,255));\n   ..\n  120  void BatteryChip::process(double dt){\n  121  \n  122:     shared_ptr<Terminal> terminal = getSector(sector_id)->terminals[storage_id].lock();\n  123  \n  124      vector<string> ports_to_display;\n  ...\n  338  \n  339          shared_ptr<Chip> chip = getSector(sector_id)->chips[contents[1]].lock();\n  340:         chip->storage_id = id;\n  341          //evaluate user and machine input\n  342          chip->process(dt);\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\world.cpp:\n  728              {\n  729                  registerNewItem(change_event->Attribute(\"sector_id\"), change_event->Attribute(\"id\"), change_event->FirstChildElement(\"type\")->GetText());\n  730:                 getSector(change_event->Attribute(\"sector_id\"))->items[change_event->Attribute(\"id\")]->storage_id = change_event->FirstChildElement(\"storage_id\")->GetText();\n  731              }\n  732              if(event_type == \"AddRope\")\n  ...\n 1662                  object_entry->LinkEndChild(subentry_1);\n 1663  \n 1664:                 TiXmlElement* subentry_2 = new TiXmlElement(\"storage_id\");\n 1665:                 subentry_2->LinkEndChild(new TiXmlText(item->storage_id));\n 1666                  object_entry->LinkEndChild(subentry_2);\n 1667              }\n ....\n 1678                  object_entry->LinkEndChild(subentry_1);\n 1679  \n 1680:                 TiXmlElement* subentry_2 = new TiXmlElement(\"storage_id\");\n 1681:                 subentry_2->LinkEndChild(new TiXmlText(chip->storage_id));\n 1682                  object_entry->LinkEndChild(subentry_2);\n 1683  \n ....\n 1944          {cout << object_element->Attribute(\"id\") << endl;\n 1945              registerNewItem(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"type\")->GetText());\n 1946:             getSector(current_sector_id)->items[object_element->Attribute(\"id\")]->storage_id = object_element->FirstChildElement(\"storage_id\")->GetText();\n 1947          }cout << \"DbbSG\" << endl;\n 1948          for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Chip\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Chip\"))\n 1949          {\n 1950              registerNewItem(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"type\")->GetText());\n 1951:             getSector(current_sector_id)->items[object_element->Attribute(\"id\")]->storage_id = object_element->FirstChildElement(\"storage_id\")->GetText();\n 1952              for(TiXmlElement* sub_element = object_element->FirstChildElement(\"var_num\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"var_num\"))\n 1953              {\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\saves\\station_a\\0_0.xml:\n  702      <Item id=\"0-11-10.643 on 8-19-1996DUSQUfeq\">\n  703          <type>3x Steel Block</type>\n  704:         <storage_id>player_1</storage_id>\n  705      </Item>\n  706      <Item id=\"0-11-9.88631 on 8-19-1996KlbFaHMl\">\n  707          <type>3x Steel Block</type>\n  708:         <storage_id>player_1</storage_id>\n  709      </Item>\n  710      <Item id=\"0-4-53.2426 on 8-19-1996PcAj]OKX\">\n  711          <type>3x Steel Block</type>\n  712:         <storage_id>player_1</storage_id>\n  713      </Item>\n  714      <Item id=\"0-6-34.2815 on 8-19-1996XIYMdQiU\">\n  715          <type>Power Cable</type>\n  716:         <storage_id></storage_id>\n  717      </Item>\n  718      <Item id=\"0-6-36.1433 on 8-19-1996UMPdJDC[\">\n  719          <type>Power Cable</type>\n  720:         <storage_id></storage_id>\n  721      </Item>\n  722      <Item id=\"0-6-38.282 on 8-19-1996GG]`iliH\">\n  723          <type>Power Cable</type>\n  724:         <storage_id></storage_id>\n  725      </Item>\n  726      <Item id=\"0-6-39.6427 on 8-19-1996[`DLMKKK\">\n  727          <type>Power Cable</type>\n  728:         <storage_id></storage_id>\n  729      </Item>\n  730      <Item id=\"0-6-41.3005 on 8-19-1996iB[nTZDH\">\n  731          <type>Power Cable</type>\n  732:         <storage_id></storage_id>\n  733      </Item>\n  734      <Item id=\"0-6-46.1067 on 8-19-1996fhjX_D_M\">\n  735          <type>GPIO Cable</type>\n  736:         <storage_id></storage_id>\n  737      </Item>\n  738      <Item id=\"0-6-47.9324 on 8-19-1996pALredqC\">\n  739          <type>GPIO Cable</type>\n  740:         <storage_id></storage_id>\n  741      </Item>\n  742      <Item id=\"0-6-51.7529 on 8-19-1996mQX_`cqi\">\n  743          <type>Steel Pipe</type>\n  744:         <storage_id></storage_id>\n  745      </Item>\n  746      <Item id=\"0-6-53.2167 on 8-19-1996kdJWjDtY\">\n  747          <type>Hazard Pipe</type>\n  748:         <storage_id></storage_id>\n  749      </Item>\n  750      <Item id=\"0-6-54.4875 on 8-19-1996F\\sSqGmo\">\n  751          <type>Steel Pipe</type>\n  752:         <storage_id></storage_id>\n  753      </Item>\n  754      <Item id=\"0-6-55.8492 on 8-19-1996ZTTACNcH\">\n  755          <type>Hazard Pipe</type>\n  756:         <storage_id></storage_id>\n  757      </Item>\n  758      <Item id=\"0-6-57.7589 on 8-19-1996UOgXCkBW\">\n  759          <type>Steel Pipe</type>\n  760:         <storage_id></storage_id>\n  761      </Item>\n  762      <Item id=\"0-7-1.57633 on 8-19-1996[q\\Mnkhg\">\n  763          <type>Steel Mount</type>\n  764:         <storage_id></storage_id>\n  765      </Item>\n  766      <Item id=\"0-7-11.4776 on 8-19-1996qsmJRBlg\">\n  767          <type>Steel Mount</type>\n  768:         <storage_id></storage_id>\n  769      </Item>\n  770      <Item id=\"0-7-12.8587 on 8-19-1996ZToWf]tq\">\n  771          <type>Steel Mount</type>\n  772:         <storage_id></storage_id>\n  773      </Item>\n  774      <Item id=\"0-7-2.87613 on 8-19-1996QgeQoHBH\">\n  775          <type>Steel Mount</type>\n  776:         <storage_id></storage_id>\n  777      </Item>\n  778      <Item id=\"0-7-21.2324 on 8-19-1996qoCWAQQ]\">\n  779          <type>Steel Bracket</type>\n  780:         <storage_id></storage_id>\n  781      </Item>\n  782      <Item id=\"0-7-22.5742 on 8-19-1996DCdYhbOg\">\n  783          <type>Steel Bracket</type>\n  784:         <storage_id></storage_id>\n  785      </Item>\n  786      <Item id=\"0-7-23.8549 on 8-19-1996o`MnVkU\\\">\n  787          <type>Steel Bracket</type>\n  788:         <storage_id></storage_id>\n  789      </Item>\n  790      <Item id=\"0-7-25.2147 on 8-19-1996f^MkmlOL\">\n  791          <type>Steel Bracket</type>\n  792:         <storage_id></storage_id>\n  793      </Item>\n  794      <Item id=\"0-7-27.4751 on 8-19-1996OGcTD`JU\">\n  795          <type>Steel Block</type>\n  796:         <storage_id></storage_id>\n  797      </Item>\n  798      <Item id=\"0-7-29.1487 on 8-19-1996GjkjSTLN\">\n  799          <type>Steel Block</type>\n  800:         <storage_id></storage_id>\n  801      </Item>\n  802      <Item id=\"0-7-3.94996 on 8-19-1996IJWTTUaj\">\n  803          <type>Steel Mount</type>\n  804:         <storage_id></storage_id>\n  805      </Item>\n  806      <Item id=\"0-7-30.8042 on 8-19-1996isor_r]D\">\n  807          <type>Steel Block</type>\n  808:         <storage_id></storage_id>\n  809      </Item>\n  810      <Item id=\"0-7-32.3749 on 8-19-1996WtJsoCGM\">\n  811          <type>Steel Bracket</type>\n  812:         <storage_id></storage_id>\n  813      </Item>\n  814      <Item id=\"0-7-5.05983 on 8-19-1996]`skGUBQ\">\n  815          <type>Steel Mount</type>\n  816:         <storage_id></storage_id>\n  817      </Item>\n  818      <Item id=\"0-7-51.4517 on 8-19-1996OVIXp^WL\">\n  819          <type>Lever</type>\n  820:         <storage_id></storage_id>\n  821      </Item>\n  822      <Item id=\"0-7-52.8934 on 8-19-1996GYUSA_QR\">\n  823          <type>Lever</type>\n  824:         <storage_id></storage_id>\n  825      </Item>\n  826      <Item id=\"0-7-54.6103 on 8-19-1996FPfHSm\\p\">\n  827          <type>Lever</type>\n  828:         <storage_id></storage_id>\n  829      </Item>\n  830      <Item id=\"0-7-57.098 on 8-19-1996aYl`GhPs\">\n  831          <type>GPIO Cable</type>\n  832:         <storage_id></storage_id>\n  833      </Item>\n  834      <Item id=\"0-7-6.62558 on 8-19-1996HSFDe\\ZS\">\n  835          <type>Steel Mount</type>\n  836:         <storage_id></storage_id>\n  837      </Item>\n  838      <Item id=\"0-7-8.03041 on 8-19-1996c`UMBabM\">\n  839          <type>Steel Mount</type>\n  840:         <storage_id></storage_id>\n  841      </Item>\n  842      <Item id=\"0-7-9.30029 on 8-19-1996ZqJHcM\\a\">\n  843          <type>Steel Mount</type>\n  844:         <storage_id></storage_id>\n  845      </Item>\n  846      <Item id=\"0-8-18.3564 on 8-19-1996QoCIMSdd\">\n  847          <type>Pressure Gauge</type>\n  848:         <storage_id></storage_id>\n  849      </Item>\n  850      <Item id=\"0-8-32.1635 on 8-19-1996FcfC[chI\">\n  851          <type>PCOC Ad 1</type>\n  852:         <storage_id></storage_id>\n  853      </Item>\n  854      <Item id=\"0-8-33.655 on 8-19-1996AnmthXCl\">\n  855          <type>PCOC Ad 1</type>\n  856:         <storage_id></storage_id>\n  857      </Item>\n  858      <Item id=\"0-8-35.3012 on 8-19-1996bhSKfgZO\">\n  859          <type>PCOC Ad 1</type>\n  860:         <storage_id></storage_id>\n  861      </Item>\n  862      <Item id=\"0-8-36.6912 on 8-19-1996RafOFPdX\">\n  863          <type>PCOC Ad 1</type>\n  864:         <storage_id></storage_id>\n  865      </Item>\n  866      <Item id=\"0-8-38.1136 on 8-19-1996DXQfDKi[\">\n  867          <type>PCOC Ad 1</type>\n  868:         <storage_id></storage_id>\n  869      </Item>\n  870      <Item id=\"0-8-39.9899 on 8-19-1996MUoCpF^e\">\n  871          <type>PCOC Ad 1</type>\n  872:         <storage_id></storage_id>\n  873      </Item>\n  874      <Item id=\"0-8-41.6846 on 8-19-1996UcPAg_Qf\">\n  875          <type>PCOC Ad 1</type>\n  876:         <storage_id></storage_id>\n  877      </Item>\n  878      <Item id=\"0-8-8.09028 on 8-19-1996so`j_gbK\">\n  879          <type>Terminal</type>\n  880:         <storage_id></storage_id>\n  881      </Item>\n  882      <Connector id=\"0-0-58.2078 on 8-19-1996sEL\\JoFt\">\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\saves\\station_b\\0_0.xml:\n  904      <Item id=\"0-11-10.643 on 8-19-1996DUSQUfeq\">\n  905          <type>3x Steel Block</type>\n  906:         <storage_id>player_1</storage_id>\n  907      </Item>\n  908      <Item id=\"0-11-9.88631 on 8-19-1996KlbFaHMl\">\n  909          <type>3x Steel Block</type>\n  910:         <storage_id>player_1</storage_id>\n  911      </Item>\n  912      <Item id=\"0-4-53.2426 on 8-19-1996PcAj]OKX\">\n  913          <type>3x Steel Block</type>\n  914:         <storage_id>player_1</storage_id>\n  915      </Item>\n  916      <Item id=\"0-6-34.2815 on 8-19-1996XIYMdQiU\">\n  917          <type>Power Cable</type>\n  918:         <storage_id></storage_id>\n  919      </Item>\n  920      <Item id=\"0-6-36.1433 on 8-19-1996UMPdJDC[\">\n  921          <type>Power Cable</type>\n  922:         <storage_id></storage_id>\n  923      </Item>\n  924      <Item id=\"0-6-38.282 on 8-19-1996GG]`iliH\">\n  925          <type>Power Cable</type>\n  926:         <storage_id></storage_id>\n  927      </Item>\n  928      <Item id=\"0-6-39.6427 on 8-19-1996[`DLMKKK\">\n  929          <type>Power Cable</type>\n  930:         <storage_id></storage_id>\n  931      </Item>\n  932      <Item id=\"0-6-41.3005 on 8-19-1996iB[nTZDH\">\n  933          <type>Power Cable</type>\n  934:         <storage_id></storage_id>\n  935      </Item>\n  936      <Item id=\"0-6-46.1067 on 8-19-1996fhjX_D_M\">\n  937          <type>GPIO Cable</type>\n  938:         <storage_id></storage_id>\n  939      </Item>\n  940      <Item id=\"0-6-47.9324 on 8-19-1996pALredqC\">\n  941          <type>GPIO Cable</type>\n  942:         <storage_id></storage_id>\n  943      </Item>\n  944      <Item id=\"0-6-51.7529 on 8-19-1996mQX_`cqi\">\n  945          <type>Steel Pipe</type>\n  946:         <storage_id></storage_id>\n  947      </Item>\n  948      <Item id=\"0-6-53.2167 on 8-19-1996kdJWjDtY\">\n  949          <type>Hazard Pipe</type>\n  950:         <storage_id></storage_id>\n  951      </Item>\n  952      <Item id=\"0-6-54.4875 on 8-19-1996F\\sSqGmo\">\n  953          <type>Steel Pipe</type>\n  954:         <storage_id></storage_id>\n  955      </Item>\n  956      <Item id=\"0-6-55.8492 on 8-19-1996ZTTACNcH\">\n  957          <type>Hazard Pipe</type>\n  958:         <storage_id></storage_id>\n  959      </Item>\n  960      <Item id=\"0-6-57.7589 on 8-19-1996UOgXCkBW\">\n  961          <type>Steel Pipe</type>\n  962:         <storage_id></storage_id>\n  963      </Item>\n  964      <Item id=\"0-7-1.57633 on 8-19-1996[q\\Mnkhg\">\n  965          <type>Steel Mount</type>\n  966:         <storage_id></storage_id>\n  967      </Item>\n  968      <Item id=\"0-7-11.4776 on 8-19-1996qsmJRBlg\">\n  969          <type>Steel Mount</type>\n  970:         <storage_id></storage_id>\n  971      </Item>\n  972      <Item id=\"0-7-12.8587 on 8-19-1996ZToWf]tq\">\n  973          <type>Steel Mount</type>\n  974:         <storage_id></storage_id>\n  975      </Item>\n  976      <Item id=\"0-7-2.87613 on 8-19-1996QgeQoHBH\">\n  977          <type>Steel Mount</type>\n  978:         <storage_id></storage_id>\n  979      </Item>\n  980      <Item id=\"0-7-21.2324 on 8-19-1996qoCWAQQ]\">\n  981          <type>Steel Bracket</type>\n  982:         <storage_id></storage_id>\n  983      </Item>\n  984      <Item id=\"0-7-22.5742 on 8-19-1996DCdYhbOg\">\n  985          <type>Steel Bracket</type>\n  986:         <storage_id></storage_id>\n  987      </Item>\n  988      <Item id=\"0-7-23.8549 on 8-19-1996o`MnVkU\\\">\n  989          <type>Steel Bracket</type>\n  990:         <storage_id></storage_id>\n  991      </Item>\n  992      <Item id=\"0-7-25.2147 on 8-19-1996f^MkmlOL\">\n  993          <type>Steel Bracket</type>\n  994:         <storage_id></storage_id>\n  995      </Item>\n  996      <Item id=\"0-7-27.4751 on 8-19-1996OGcTD`JU\">\n  997          <type>Steel Block</type>\n  998:         <storage_id></storage_id>\n  999      </Item>\n 1000      <Item id=\"0-7-29.1487 on 8-19-1996GjkjSTLN\">\n 1001          <type>Steel Block</type>\n 1002:         <storage_id></storage_id>\n 1003      </Item>\n 1004      <Item id=\"0-7-3.94996 on 8-19-1996IJWTTUaj\">\n 1005          <type>Steel Mount</type>\n 1006:         <storage_id></storage_id>\n 1007      </Item>\n 1008      <Item id=\"0-7-30.8042 on 8-19-1996isor_r]D\">\n 1009          <type>Steel Block</type>\n 1010:         <storage_id></storage_id>\n 1011      </Item>\n 1012      <Item id=\"0-7-32.3749 on 8-19-1996WtJsoCGM\">\n 1013          <type>Steel Bracket</type>\n 1014:         <storage_id></storage_id>\n 1015      </Item>\n 1016      <Item id=\"0-7-5.05983 on 8-19-1996]`skGUBQ\">\n 1017          <type>Steel Mount</type>\n 1018:         <storage_id></storage_id>\n 1019      </Item>\n 1020      <Item id=\"0-7-51.4517 on 8-19-1996OVIXp^WL\">\n 1021          <type>Lever</type>\n 1022:         <storage_id></storage_id>\n 1023      </Item>\n 1024      <Item id=\"0-7-52.8934 on 8-19-1996GYUSA_QR\">\n 1025          <type>Lever</type>\n 1026:         <storage_id></storage_id>\n 1027      </Item>\n 1028      <Item id=\"0-7-54.6103 on 8-19-1996FPfHSm\\p\">\n 1029          <type>Lever</type>\n 1030:         <storage_id></storage_id>\n 1031      </Item>\n 1032      <Item id=\"0-7-57.098 on 8-19-1996aYl`GhPs\">\n 1033          <type>GPIO Cable</type>\n 1034:         <storage_id></storage_id>\n 1035      </Item>\n 1036      <Item id=\"0-7-6.62558 on 8-19-1996HSFDe\\ZS\">\n 1037          <type>Steel Mount</type>\n 1038:         <storage_id></storage_id>\n 1039      </Item>\n 1040      <Item id=\"0-7-8.03041 on 8-19-1996c`UMBabM\">\n 1041          <type>Steel Mount</type>\n 1042:         <storage_id></storage_id>\n 1043      </Item>\n 1044      <Item id=\"0-7-9.30029 on 8-19-1996ZqJHcM\\a\">\n 1045          <type>Steel Mount</type>\n 1046:         <storage_id></storage_id>\n 1047      </Item>\n 1048      <Item id=\"0-8-18.3564 on 8-19-1996QoCIMSdd\">\n 1049          <type>Pressure Gauge</type>\n 1050:         <storage_id></storage_id>\n 1051      </Item>\n 1052      <Item id=\"0-8-32.1635 on 8-19-1996FcfC[chI\">\n 1053          <type>PCOC Ad 1</type>\n 1054:         <storage_id></storage_id>\n 1055      </Item>\n 1056      <Item id=\"0-8-33.655 on 8-19-1996AnmthXCl\">\n 1057          <type>PCOC Ad 1</type>\n 1058:         <storage_id></storage_id>\n 1059      </Item>\n 1060      <Item id=\"0-8-35.3012 on 8-19-1996bhSKfgZO\">\n 1061          <type>PCOC Ad 1</type>\n 1062:         <storage_id></storage_id>\n 1063      </Item>\n 1064      <Item id=\"0-8-36.6912 on 8-19-1996RafOFPdX\">\n 1065          <type>PCOC Ad 1</type>\n 1066:         <storage_id></storage_id>\n 1067      </Item>\n 1068      <Item id=\"0-8-38.1136 on 8-19-1996DXQfDKi[\">\n 1069          <type>PCOC Ad 1</type>\n 1070:         <storage_id></storage_id>\n 1071      </Item>\n 1072      <Item id=\"0-8-39.9899 on 8-19-1996MUoCpF^e\">\n 1073          <type>PCOC Ad 1</type>\n 1074:         <storage_id></storage_id>\n 1075      </Item>\n 1076      <Item id=\"0-8-41.6846 on 8-19-1996UcPAg_Qf\">\n 1077          <type>PCOC Ad 1</type>\n 1078:         <storage_id></storage_id>\n 1079      </Item>\n 1080      <Item id=\"0-8-8.09028 on 8-19-1996so`j_gbK\">\n 1081          <type>Terminal</type>\n 1082:         <storage_id></storage_id>\n 1083      </Item>\n 1084      <Connector id=\"0-0-58.2078 on 8-19-1996sEL\\JoFt\">\n\n217 matches across 7 files\n\n\nSearching 81 files for \"storage_id\"\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\entity.cpp:\n  963      if(contents[slot_index]==\"\" and getSector(sector_id)->items.count(item_id)!=0){\n  964          contents[slot_index] = item_id;\n  965:         getSector(sector_id)->items[item_id]->storage_id = id;\n  966          return true;\n  967      }\n  ...\n  988      if(index!=0){\n  989          if(getSector(sector_id)->items.count(contents[index])!=0){\n  990:             getSector(sector_id)->items[contents[index]]->storage_id = \"\";\n  991          }\n  992          contents[index] = \"\";\n  ...\n 1018  //            string item_id = registerNewItem(sector_id, parser->first);\n 1019  //            shared_ptr<Item> item = getSector(sector_id)->items[item_id];\n 1020: //            item->storage_id = makeNewScrap(sector_id, createUniqueId(), new_coords.x,new_coords.y);\n 1021: //            getSector(sector_id)->scrap[item->storage_id].lock()->setItem(item->id);\n 1022: //            getSector(sector_id)->scrap[item->storage_id].lock()->sprite.setRotation(sprite.getRotation());\n 1023  //\n 1024  //            double rot_amount = rand()%100;\n 1025  //            if(rand() % 100<50){rot_amount*=-1;}\n 1026: //            getSector(sector_id)->scrap[item->storage_id].lock()->setVelocity((rot_amount)+getVelocity().x/10,(rot_amount)+getVelocity().y/10);\n 1027: //            getSector(sector_id)->scrap[item->storage_id].lock()->setRotationalVelocity(getRotationalVelocity()+(rot_amount));\n 1028  //\n 1029  //        }\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\item.cpp:\n   16  }\n   17  \n   18: bool Item::putInStorage(string new_storage_id){\n   19  \n   20:     string old_storage_id = storage_id;\n   21  \n   22:     if(shared_ptr<Entity> old_storage = getSector(sector_id)->getEnt(old_storage_id)){\n   23          old_storage->removeFromContents(id);\n   24      }\n   25  \n   26:     if(shared_ptr<Entity> new_storage = getSector(sector_id)->getEnt(new_storage_id)){\n   27          if(new_storage->addToContents(id)){\n   28              return true;\n   ..\n   30      }\n   31      //else\n   32:     if(shared_ptr<Entity> old_storage = getSector(sector_id)->getEnt(old_storage_id)){\n   33          old_storage->addToContents(id);\n   34      }\n   ..\n   39  //bool Item::putInWorld(Vector2f new_coords){\n   40  //\n   41: //    string old_storage_id = storage_id;\n   42  //\n   43: //    if(shared_ptr<Entity> old_storage = getSector(sector_id)->getEnt(old_storage_id)){\n   44  //        old_storage->removeFromContents(id);\n   45  //    }\n   46  //\n   47: //    storage_id = makeNewScrap(sector_id,createUniqueId(),new_coords.x,new_coords.y);\n   48: //    if(getSector(sector_id)->scrap[storage_id].lock()->setItem(id)){\n   49  //\n   50  //        return true;\n   ..\n   52  //    else{\n   53  //\n   54: //        if(shared_ptr<Entity> old_storage = getSector(sector_id)->getEnt(old_storage_id)){\n   55  //            old_storage->addToContents(id);\n   56  //        }\n   ..\n   76  //}\n   77  \n   78: void makeNewItemInStorage(string sector_id, string item_id, string type, string storage_id){\n   79  \n   80      registerNewItem(sector_id, item_id, type);\n   81      shared_ptr<Item> item = getSector(sector_id)->items[item_id];\n   82  \n   83:     item->putInStorage(storage_id);\n   84  }\n   85  \n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\item.h:\n   17      shared_ptr<Properties> properties; //name, parts that make it up, visual, about\n   18  \n   19:     bool putInStorage(string new_storage_id);\n   20     // bool putInWorld(Vector2f new_coords);\n   21  \n   22      string sector_id;\n   23:     string storage_id = \"\";\n   24  };\n   25  \n   26  //void makeNewItemInWorld(string sector_id, string type, string item_id, Vector2f new_coords);\n   27: void makeNewItemInStorage(string sector_id, string item_id, string type, string storage_id);\n   28  \n   29  \n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\terminal.cpp:\n   36  void SwitchChip::process(double dt){\n   37  \n   38:     shared_ptr<Terminal> terminal = getSector(sector_id)->terminals[storage_id].lock();\n   39  \n   40      RectangleShape button_A = createRectangle(Vector2f(600, 335), Vector2f(100,50), 3, Color(0,0,0,0), Color(255,255,255,255));\n   ..\n  120  void BatteryChip::process(double dt){\n  121  \n  122:     shared_ptr<Terminal> terminal = getSector(sector_id)->terminals[storage_id].lock();\n  123  \n  124      vector<string> ports_to_display;\n  ...\n  338  \n  339          shared_ptr<Chip> chip = getSector(sector_id)->chips[contents[1]].lock();\n  340:         chip->storage_id = id;\n  341          //evaluate user and machine input\n  342          chip->process(dt);\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\world.cpp:\n  728              {\n  729                  registerNewItem(change_event->Attribute(\"sector_id\"), change_event->Attribute(\"id\"), change_event->FirstChildElement(\"type\")->GetText());\n  730:                 getSector(change_event->Attribute(\"sector_id\"))->items[change_event->Attribute(\"id\")]->storage_id = change_event->FirstChildElement(\"storage_id\")->GetText();\n  731              }\n  732              if(event_type == \"AddRope\")\n  ...\n 1662                  object_entry->LinkEndChild(subentry_1);\n 1663  \n 1664:                 TiXmlElement* subentry_2 = new TiXmlElement(\"storage_id\");\n 1665:                 subentry_2->LinkEndChild(new TiXmlText(item->storage_id));\n 1666                  object_entry->LinkEndChild(subentry_2);\n 1667              }\n ....\n 1678                  object_entry->LinkEndChild(subentry_1);\n 1679  \n 1680:                 TiXmlElement* subentry_2 = new TiXmlElement(\"storage_id\");\n 1681:                 subentry_2->LinkEndChild(new TiXmlText(chip->storage_id));\n 1682                  object_entry->LinkEndChild(subentry_2);\n 1683  \n ....\n 1944          {cout << object_element->Attribute(\"id\") << endl;\n 1945              registerNewItem(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"type\")->GetText());\n 1946:             getSector(current_sector_id)->items[object_element->Attribute(\"id\")]->storage_id = object_element->FirstChildElement(\"storage_id\")->GetText();\n 1947          }cout << \"DbbSG\" << endl;\n 1948          for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Chip\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Chip\"))\n 1949          {\n 1950              registerNewItem(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"type\")->GetText());\n 1951:             getSector(current_sector_id)->items[object_element->Attribute(\"id\")]->storage_id = object_element->FirstChildElement(\"storage_id\")->GetText();\n 1952              for(TiXmlElement* sub_element = object_element->FirstChildElement(\"var_num\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"var_num\"))\n 1953              {\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\saves\\station_a\\0_0.xml:\n  702      <Item id=\"0-11-10.643 on 8-19-1996DUSQUfeq\">\n  703          <type>3x Steel Block</type>\n  704:         <storage_id>player_1</storage_id>\n  705      </Item>\n  706      <Item id=\"0-11-9.88631 on 8-19-1996KlbFaHMl\">\n  707          <type>3x Steel Block</type>\n  708:         <storage_id>player_1</storage_id>\n  709      </Item>\n  710      <Item id=\"0-4-53.2426 on 8-19-1996PcAj]OKX\">\n  711          <type>3x Steel Block</type>\n  712:         <storage_id>player_1</storage_id>\n  713      </Item>\n  714      <Item id=\"0-6-34.2815 on 8-19-1996XIYMdQiU\">\n  715          <type>Power Cable</type>\n  716:         <storage_id></storage_id>\n  717      </Item>\n  718      <Item id=\"0-6-36.1433 on 8-19-1996UMPdJDC[\">\n  719          <type>Power Cable</type>\n  720:         <storage_id></storage_id>\n  721      </Item>\n  722      <Item id=\"0-6-38.282 on 8-19-1996GG]`iliH\">\n  723          <type>Power Cable</type>\n  724:         <storage_id></storage_id>\n  725      </Item>\n  726      <Item id=\"0-6-39.6427 on 8-19-1996[`DLMKKK\">\n  727          <type>Power Cable</type>\n  728:         <storage_id></storage_id>\n  729      </Item>\n  730      <Item id=\"0-6-41.3005 on 8-19-1996iB[nTZDH\">\n  731          <type>Power Cable</type>\n  732:         <storage_id></storage_id>\n  733      </Item>\n  734      <Item id=\"0-6-46.1067 on 8-19-1996fhjX_D_M\">\n  735          <type>GPIO Cable</type>\n  736:         <storage_id></storage_id>\n  737      </Item>\n  738      <Item id=\"0-6-47.9324 on 8-19-1996pALredqC\">\n  739          <type>GPIO Cable</type>\n  740:         <storage_id></storage_id>\n  741      </Item>\n  742      <Item id=\"0-6-51.7529 on 8-19-1996mQX_`cqi\">\n  743          <type>Steel Pipe</type>\n  744:         <storage_id></storage_id>\n  745      </Item>\n  746      <Item id=\"0-6-53.2167 on 8-19-1996kdJWjDtY\">\n  747          <type>Hazard Pipe</type>\n  748:         <storage_id></storage_id>\n  749      </Item>\n  750      <Item id=\"0-6-54.4875 on 8-19-1996F\\sSqGmo\">\n  751          <type>Steel Pipe</type>\n  752:         <storage_id></storage_id>\n  753      </Item>\n  754      <Item id=\"0-6-55.8492 on 8-19-1996ZTTACNcH\">\n  755          <type>Hazard Pipe</type>\n  756:         <storage_id></storage_id>\n  757      </Item>\n  758      <Item id=\"0-6-57.7589 on 8-19-1996UOgXCkBW\">\n  759          <type>Steel Pipe</type>\n  760:         <storage_id></storage_id>\n  761      </Item>\n  762      <Item id=\"0-7-1.57633 on 8-19-1996[q\\Mnkhg\">\n  763          <type>Steel Mount</type>\n  764:         <storage_id></storage_id>\n  765      </Item>\n  766      <Item id=\"0-7-11.4776 on 8-19-1996qsmJRBlg\">\n  767          <type>Steel Mount</type>\n  768:         <storage_id></storage_id>\n  769      </Item>\n  770      <Item id=\"0-7-12.8587 on 8-19-1996ZToWf]tq\">\n  771          <type>Steel Mount</type>\n  772:         <storage_id></storage_id>\n  773      </Item>\n  774      <Item id=\"0-7-2.87613 on 8-19-1996QgeQoHBH\">\n  775          <type>Steel Mount</type>\n  776:         <storage_id></storage_id>\n  777      </Item>\n  778      <Item id=\"0-7-21.2324 on 8-19-1996qoCWAQQ]\">\n  779          <type>Steel Bracket</type>\n  780:         <storage_id></storage_id>\n  781      </Item>\n  782      <Item id=\"0-7-22.5742 on 8-19-1996DCdYhbOg\">\n  783          <type>Steel Bracket</type>\n  784:         <storage_id></storage_id>\n  785      </Item>\n  786      <Item id=\"0-7-23.8549 on 8-19-1996o`MnVkU\\\">\n  787          <type>Steel Bracket</type>\n  788:         <storage_id></storage_id>\n  789      </Item>\n  790      <Item id=\"0-7-25.2147 on 8-19-1996f^MkmlOL\">\n  791          <type>Steel Bracket</type>\n  792:         <storage_id></storage_id>\n  793      </Item>\n  794      <Item id=\"0-7-27.4751 on 8-19-1996OGcTD`JU\">\n  795          <type>Steel Block</type>\n  796:         <storage_id></storage_id>\n  797      </Item>\n  798      <Item id=\"0-7-29.1487 on 8-19-1996GjkjSTLN\">\n  799          <type>Steel Block</type>\n  800:         <storage_id></storage_id>\n  801      </Item>\n  802      <Item id=\"0-7-3.94996 on 8-19-1996IJWTTUaj\">\n  803          <type>Steel Mount</type>\n  804:         <storage_id></storage_id>\n  805      </Item>\n  806      <Item id=\"0-7-30.8042 on 8-19-1996isor_r]D\">\n  807          <type>Steel Block</type>\n  808:         <storage_id></storage_id>\n  809      </Item>\n  810      <Item id=\"0-7-32.3749 on 8-19-1996WtJsoCGM\">\n  811          <type>Steel Bracket</type>\n  812:         <storage_id></storage_id>\n  813      </Item>\n  814      <Item id=\"0-7-5.05983 on 8-19-1996]`skGUBQ\">\n  815          <type>Steel Mount</type>\n  816:         <storage_id></storage_id>\n  817      </Item>\n  818      <Item id=\"0-7-51.4517 on 8-19-1996OVIXp^WL\">\n  819          <type>Lever</type>\n  820:         <storage_id></storage_id>\n  821      </Item>\n  822      <Item id=\"0-7-52.8934 on 8-19-1996GYUSA_QR\">\n  823          <type>Lever</type>\n  824:         <storage_id></storage_id>\n  825      </Item>\n  826      <Item id=\"0-7-54.6103 on 8-19-1996FPfHSm\\p\">\n  827          <type>Lever</type>\n  828:         <storage_id></storage_id>\n  829      </Item>\n  830      <Item id=\"0-7-57.098 on 8-19-1996aYl`GhPs\">\n  831          <type>GPIO Cable</type>\n  832:         <storage_id></storage_id>\n  833      </Item>\n  834      <Item id=\"0-7-6.62558 on 8-19-1996HSFDe\\ZS\">\n  835          <type>Steel Mount</type>\n  836:         <storage_id></storage_id>\n  837      </Item>\n  838      <Item id=\"0-7-8.03041 on 8-19-1996c`UMBabM\">\n  839          <type>Steel Mount</type>\n  840:         <storage_id></storage_id>\n  841      </Item>\n  842      <Item id=\"0-7-9.30029 on 8-19-1996ZqJHcM\\a\">\n  843          <type>Steel Mount</type>\n  844:         <storage_id></storage_id>\n  845      </Item>\n  846      <Item id=\"0-8-18.3564 on 8-19-1996QoCIMSdd\">\n  847          <type>Pressure Gauge</type>\n  848:         <storage_id></storage_id>\n  849      </Item>\n  850      <Item id=\"0-8-32.1635 on 8-19-1996FcfC[chI\">\n  851          <type>PCOC Ad 1</type>\n  852:         <storage_id></storage_id>\n  853      </Item>\n  854      <Item id=\"0-8-33.655 on 8-19-1996AnmthXCl\">\n  855          <type>PCOC Ad 1</type>\n  856:         <storage_id></storage_id>\n  857      </Item>\n  858      <Item id=\"0-8-35.3012 on 8-19-1996bhSKfgZO\">\n  859          <type>PCOC Ad 1</type>\n  860:         <storage_id></storage_id>\n  861      </Item>\n  862      <Item id=\"0-8-36.6912 on 8-19-1996RafOFPdX\">\n  863          <type>PCOC Ad 1</type>\n  864:         <storage_id></storage_id>\n  865      </Item>\n  866      <Item id=\"0-8-38.1136 on 8-19-1996DXQfDKi[\">\n  867          <type>PCOC Ad 1</type>\n  868:         <storage_id></storage_id>\n  869      </Item>\n  870      <Item id=\"0-8-39.9899 on 8-19-1996MUoCpF^e\">\n  871          <type>PCOC Ad 1</type>\n  872:         <storage_id></storage_id>\n  873      </Item>\n  874      <Item id=\"0-8-41.6846 on 8-19-1996UcPAg_Qf\">\n  875          <type>PCOC Ad 1</type>\n  876:         <storage_id></storage_id>\n  877      </Item>\n  878      <Item id=\"0-8-8.09028 on 8-19-1996so`j_gbK\">\n  879          <type>Terminal</type>\n  880:         <storage_id></storage_id>\n  881      </Item>\n  882      <Connector id=\"0-0-58.2078 on 8-19-1996sEL\\JoFt\">\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\saves\\station_b\\0_0.xml:\n  904      <Item id=\"0-11-10.643 on 8-19-1996DUSQUfeq\">\n  905          <type>3x Steel Block</type>\n  906:         <storage_id>player_1</storage_id>\n  907      </Item>\n  908      <Item id=\"0-11-9.88631 on 8-19-1996KlbFaHMl\">\n  909          <type>3x Steel Block</type>\n  910:         <storage_id>player_1</storage_id>\n  911      </Item>\n  912      <Item id=\"0-4-53.2426 on 8-19-1996PcAj]OKX\">\n  913          <type>3x Steel Block</type>\n  914:         <storage_id>player_1</storage_id>\n  915      </Item>\n  916      <Item id=\"0-6-34.2815 on 8-19-1996XIYMdQiU\">\n  917          <type>Power Cable</type>\n  918:         <storage_id></storage_id>\n  919      </Item>\n  920      <Item id=\"0-6-36.1433 on 8-19-1996UMPdJDC[\">\n  921          <type>Power Cable</type>\n  922:         <storage_id></storage_id>\n  923      </Item>\n  924      <Item id=\"0-6-38.282 on 8-19-1996GG]`iliH\">\n  925          <type>Power Cable</type>\n  926:         <storage_id></storage_id>\n  927      </Item>\n  928      <Item id=\"0-6-39.6427 on 8-19-1996[`DLMKKK\">\n  929          <type>Power Cable</type>\n  930:         <storage_id></storage_id>\n  931      </Item>\n  932      <Item id=\"0-6-41.3005 on 8-19-1996iB[nTZDH\">\n  933          <type>Power Cable</type>\n  934:         <storage_id></storage_id>\n  935      </Item>\n  936      <Item id=\"0-6-46.1067 on 8-19-1996fhjX_D_M\">\n  937          <type>GPIO Cable</type>\n  938:         <storage_id></storage_id>\n  939      </Item>\n  940      <Item id=\"0-6-47.9324 on 8-19-1996pALredqC\">\n  941          <type>GPIO Cable</type>\n  942:         <storage_id></storage_id>\n  943      </Item>\n  944      <Item id=\"0-6-51.7529 on 8-19-1996mQX_`cqi\">\n  945          <type>Steel Pipe</type>\n  946:         <storage_id></storage_id>\n  947      </Item>\n  948      <Item id=\"0-6-53.2167 on 8-19-1996kdJWjDtY\">\n  949          <type>Hazard Pipe</type>\n  950:         <storage_id></storage_id>\n  951      </Item>\n  952      <Item id=\"0-6-54.4875 on 8-19-1996F\\sSqGmo\">\n  953          <type>Steel Pipe</type>\n  954:         <storage_id></storage_id>\n  955      </Item>\n  956      <Item id=\"0-6-55.8492 on 8-19-1996ZTTACNcH\">\n  957          <type>Hazard Pipe</type>\n  958:         <storage_id></storage_id>\n  959      </Item>\n  960      <Item id=\"0-6-57.7589 on 8-19-1996UOgXCkBW\">\n  961          <type>Steel Pipe</type>\n  962:         <storage_id></storage_id>\n  963      </Item>\n  964      <Item id=\"0-7-1.57633 on 8-19-1996[q\\Mnkhg\">\n  965          <type>Steel Mount</type>\n  966:         <storage_id></storage_id>\n  967      </Item>\n  968      <Item id=\"0-7-11.4776 on 8-19-1996qsmJRBlg\">\n  969          <type>Steel Mount</type>\n  970:         <storage_id></storage_id>\n  971      </Item>\n  972      <Item id=\"0-7-12.8587 on 8-19-1996ZToWf]tq\">\n  973          <type>Steel Mount</type>\n  974:         <storage_id></storage_id>\n  975      </Item>\n  976      <Item id=\"0-7-2.87613 on 8-19-1996QgeQoHBH\">\n  977          <type>Steel Mount</type>\n  978:         <storage_id></storage_id>\n  979      </Item>\n  980      <Item id=\"0-7-21.2324 on 8-19-1996qoCWAQQ]\">\n  981          <type>Steel Bracket</type>\n  982:         <storage_id></storage_id>\n  983      </Item>\n  984      <Item id=\"0-7-22.5742 on 8-19-1996DCdYhbOg\">\n  985          <type>Steel Bracket</type>\n  986:         <storage_id></storage_id>\n  987      </Item>\n  988      <Item id=\"0-7-23.8549 on 8-19-1996o`MnVkU\\\">\n  989          <type>Steel Bracket</type>\n  990:         <storage_id></storage_id>\n  991      </Item>\n  992      <Item id=\"0-7-25.2147 on 8-19-1996f^MkmlOL\">\n  993          <type>Steel Bracket</type>\n  994:         <storage_id></storage_id>\n  995      </Item>\n  996      <Item id=\"0-7-27.4751 on 8-19-1996OGcTD`JU\">\n  997          <type>Steel Block</type>\n  998:         <storage_id></storage_id>\n  999      </Item>\n 1000      <Item id=\"0-7-29.1487 on 8-19-1996GjkjSTLN\">\n 1001          <type>Steel Block</type>\n 1002:         <storage_id></storage_id>\n 1003      </Item>\n 1004      <Item id=\"0-7-3.94996 on 8-19-1996IJWTTUaj\">\n 1005          <type>Steel Mount</type>\n 1006:         <storage_id></storage_id>\n 1007      </Item>\n 1008      <Item id=\"0-7-30.8042 on 8-19-1996isor_r]D\">\n 1009          <type>Steel Block</type>\n 1010:         <storage_id></storage_id>\n 1011      </Item>\n 1012      <Item id=\"0-7-32.3749 on 8-19-1996WtJsoCGM\">\n 1013          <type>Steel Bracket</type>\n 1014:         <storage_id></storage_id>\n 1015      </Item>\n 1016      <Item id=\"0-7-5.05983 on 8-19-1996]`skGUBQ\">\n 1017          <type>Steel Mount</type>\n 1018:         <storage_id></storage_id>\n 1019      </Item>\n 1020      <Item id=\"0-7-51.4517 on 8-19-1996OVIXp^WL\">\n 1021          <type>Lever</type>\n 1022:         <storage_id></storage_id>\n 1023      </Item>\n 1024      <Item id=\"0-7-52.8934 on 8-19-1996GYUSA_QR\">\n 1025          <type>Lever</type>\n 1026:         <storage_id></storage_id>\n 1027      </Item>\n 1028      <Item id=\"0-7-54.6103 on 8-19-1996FPfHSm\\p\">\n 1029          <type>Lever</type>\n 1030:         <storage_id></storage_id>\n 1031      </Item>\n 1032      <Item id=\"0-7-57.098 on 8-19-1996aYl`GhPs\">\n 1033          <type>GPIO Cable</type>\n 1034:         <storage_id></storage_id>\n 1035      </Item>\n 1036      <Item id=\"0-7-6.62558 on 8-19-1996HSFDe\\ZS\">\n 1037          <type>Steel Mount</type>\n 1038:         <storage_id></storage_id>\n 1039      </Item>\n 1040      <Item id=\"0-7-8.03041 on 8-19-1996c`UMBabM\">\n 1041          <type>Steel Mount</type>\n 1042:         <storage_id></storage_id>\n 1043      </Item>\n 1044      <Item id=\"0-7-9.30029 on 8-19-1996ZqJHcM\\a\">\n 1045          <type>Steel Mount</type>\n 1046:         <storage_id></storage_id>\n 1047      </Item>\n 1048      <Item id=\"0-8-18.3564 on 8-19-1996QoCIMSdd\">\n 1049          <type>Pressure Gauge</type>\n 1050:         <storage_id></storage_id>\n 1051      </Item>\n 1052      <Item id=\"0-8-32.1635 on 8-19-1996FcfC[chI\">\n 1053          <type>PCOC Ad 1</type>\n 1054:         <storage_id></storage_id>\n 1055      </Item>\n 1056      <Item id=\"0-8-33.655 on 8-19-1996AnmthXCl\">\n 1057          <type>PCOC Ad 1</type>\n 1058:         <storage_id></storage_id>\n 1059      </Item>\n 1060      <Item id=\"0-8-35.3012 on 8-19-1996bhSKfgZO\">\n 1061          <type>PCOC Ad 1</type>\n 1062:         <storage_id></storage_id>\n 1063      </Item>\n 1064      <Item id=\"0-8-36.6912 on 8-19-1996RafOFPdX\">\n 1065          <type>PCOC Ad 1</type>\n 1066:         <storage_id></storage_id>\n 1067      </Item>\n 1068      <Item id=\"0-8-38.1136 on 8-19-1996DXQfDKi[\">\n 1069          <type>PCOC Ad 1</type>\n 1070:         <storage_id></storage_id>\n 1071      </Item>\n 1072      <Item id=\"0-8-39.9899 on 8-19-1996MUoCpF^e\">\n 1073          <type>PCOC Ad 1</type>\n 1074:         <storage_id></storage_id>\n 1075      </Item>\n 1076      <Item id=\"0-8-41.6846 on 8-19-1996UcPAg_Qf\">\n 1077          <type>PCOC Ad 1</type>\n 1078:         <storage_id></storage_id>\n 1079      </Item>\n 1080      <Item id=\"0-8-8.09028 on 8-19-1996so`j_gbK\">\n 1081          <type>Terminal</type>\n 1082:         <storage_id></storage_id>\n 1083      </Item>\n 1084      <Connector id=\"0-0-58.2078 on 8-19-1996sEL\\JoFt\">\n\n217 matches across 7 files\n\n\nSearching 81 files for \"blank_space\"\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\main.cpp:\n  140          }*/\n  141  \n  142:         world.loadWorldFromFile(\"blank_space\");\n  143  \n  144          Session session(\"Deep\");\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\saves\\index.xml:\n    1  <?xml version=\"1.0\" ?>\n    2: <Save>blank_space</Save>\n    3  <Save>root</Save>\n    4  <Save>station_a</Save>\n\nC:\\Users\\Richard\\Desktop\\C++ Work\\Deep Server\\saves\\blank_space\\index.xml:\n    1  <?xml version=\"1.0\" ?>\n    2: <World id=\"blank_space\">\n    3:     <Sector path=\"saves/blank_space/0_0.xml\" />\n    4  </World>\n    5  \n\n4 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 45494,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "info.xml",
			"settings":
			{
				"buffer_size": 16304,
				"line_ending": "Windows"
			}
		},
		{
			"file": "main.cpp",
			"settings":
			{
				"buffer_size": 4331,
				"line_ending": "Windows"
			}
		},
		{
			"file": "session.h",
			"settings":
			{
				"buffer_size": 1604,
				"line_ending": "Windows"
			}
		},
		{
			"file": "entity.h",
			"settings":
			{
				"buffer_size": 4986,
				"line_ending": "Windows"
			}
		},
		{
			"file": "world.h",
			"settings":
			{
				"buffer_size": 4224,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include \"main.h\"\n\nusing namespace std;\nusing namespace sf;\n\n\nextern World world;\nextern RenderWindow window;\n\nSector::Sector(){}\n\n\nSector::Sector(string cid, double r, string tex, double ambient, bool plnt)\n{\n    id = cid;\n\n    ambient_light = ambient;\n\n    planetside = plnt;\n    radius = r;\n    backdrop_tx_path = tex;\n\n    backdrop.setTextureRect(IntRect(0,0,2*radius,2*radius));\n    backdrop.setOrigin(radius,radius);\n    backdrop_tx.loadFromFile(backdrop_tx_path.c_str());\n    backdrop_tx.setRepeated(true);\n    backdrop.setTexture(backdrop_tx,false);\n\n    collision_grid = CollisionGrid(id,160,Vector2f(-radius,-radius),Vector2f(radius,radius));\n    floor_grid = CollisionGrid(id,500,Vector2f(-radius,-radius),Vector2f(radius,radius));\n}\n\nvoid Sector::process(double dt){\n\n\n    for(map<string, shared_ptr<Entity> >::iterator i = ents.begin(); i != ents.end(); i++) //run per-loop operations on floor\n    {\n        i->second->floors.clear();\n        i->second->floor_bonds.clear();\n        i->second->bonded_to_floor = false;\n    }\n    for(map<string, shared_ptr<Floor> >::iterator i = floors.begin(); i != floors.end(); i++) //run per-loop operations on floor\n    {\n        i->second->flagBonded();\n    }\n    for(map<string, shared_ptr<Floor> >::iterator i = floors.begin(); i != floors.end(); i++) //run per-loop operations on floor\n    {\n        i->second->determinePassengers();\n    }\n\n    //WIPE COLLISION GRID SO THAT OBJECTS CAN RE-ADD THEMSELVES BASED ON NEW LOCATIONS\n    collision_grid.reset();\n    floor_grid.reset();\n    //\n\n    //REINSERT INTO GRID\n    for(map<string, shared_ptr<Floor> >::iterator i = floors.begin(); i != floors.end(); i++) //run per-loop operations on floor\n    {\n        floor_grid.insertObject(i->second->id);\n    }\n    for(map<string, shared_ptr<Entity> >::iterator i = ents.begin(); i != ents.end(); i++) //run per-loop operations on object\n    {\n        collision_grid.insertObject(i->second->id);\n    }\n    //\n\n    //RUN OBJECT PROCESSES FOR THIS TICK + DETERMINE NEW LOCATIONS\n\n    for(map<string, shared_ptr<Floor> >::iterator i = floors.begin(); i != floors.end(); i++) //run per-loop operations on floor\n    {\n        shared_ptr<Floor> floor = i->second;\n        i->second->run(dt);\n\n\n        if(planetside){\n\n            Vector2f relative_velocity = floor->getVelocity()*-1;\n            double surface_area = 1;\n            floor->applyImpulse(relative_velocity.x*floor->getMyMass()*surface_area*20*dt,relative_velocity.y*floor->getMyMass()*surface_area*20*dt,floor->getPosition(),false,false);\n\n            double relative_spin = floor->getRotationalVelocity()*-1;\n            floor->applyRotationalImpulse(relative_spin*floor->getMyInertia()*surface_area*20*dt);\n        }\n    }\n   for(map<string, weak_ptr<Machine> >::iterator i = machines.begin(); i != machines.end(); i++) //run per-loop operations on object\n    {\n        i->second.lock()->performFunction(dt);\n    }\n    for(map<string, shared_ptr<Entity> >::iterator i = ents.begin(); i != ents.end(); i++) //run per-loop operations on object\n    {\n\n\n        i->second->run(dt);\n        shared_ptr<Entity> entity = i->second;\n        if(planetside && entity->floors.size()==0){\n\n            if(people.count(i->first)!=0 && people[i->first].lock()->jetpack_on){continue;}\n\n            Vector2f relative_velocity = entity->getVelocity()*-1;\n            double surface_area = M_PI*(convertToMeters(entity->collision_radius)*convertToMeters(entity->collision_radius));\n            entity->applyImpulse(relative_velocity.x*entity->getMyMass()*surface_area*20*dt,relative_velocity.y*entity->getMyMass()*surface_area*20*dt,entity->getPosition(),false,false);\n\n            double relative_spin = entity->getRotationalVelocity()*-1;\n            entity->applyRotationalImpulse(relative_spin*entity->getMyInertia()*surface_area*20*dt);\n        }\n    }\n    for(map<string, shared_ptr<Floor> >::iterator i = floors.begin(); i != floors.end(); i++) //run per-loop operations on floor\n    {\n        i->second->applyGrip(dt);\n    }\n    for(map<string, shared_ptr<Poster> >::iterator i = posters.begin(); i != posters.end(); i++) //run per-loop operations on object\n    {\n        i->second->run(dt);\n    }\n    for(map<string, shared_ptr<Interface> >::iterator i = interfaces.begin(); i != interfaces.end(); i++)\n    {\n        i->second->run(dt);\n    }\n    for(map<string, shared_ptr<Rope> >::iterator i = ropes.begin(); i != ropes.end(); i++)\n    {\n        i->second->run(dt);\n    }\n//    for(map<string, shared_ptr<Cloud> >::iterator parser = clouds.begin(); parser!=clouds.end(); parser++){\n//\n//        bool too_far_out = true;\n//        for(map<string, shared_ptr<Entity> >::iterator i = ents.begin(); i != ents.end(); i++)\n//        {\n//            if(i->second->properties->classification==\"ITEM\"){continue;}\n//            if(parser->second->inRange(i->second->getPosition(),500)){too_far_out = false;}\n//            if(parser->second->inRange(i->second->getPosition(),i->second->collision_radius-5))\n//            {\n//                Vector2f dist = Vector2f((parser->second->coords.x - i->second->getPosition().x),(parser->second->coords.y - i->second->getPosition().y));\n//                double h = hypot(dist.x,dist.y);\n//                double seperation_dist = h - (i->second->collision_radius+parser->second->radius);\n//\n//                if(h != 0){\n//                    Vector2f unit_vector = Vector2f(dist.x/h,dist.y/h);\n//\n//                    if(seperation_dist<0){parser->second->coords = parser->second->coords - unit_vector*seperation_dist;}\n//\n//                    double vector_p = hypot(parser->second->p.x,parser->second->p.y);\n//                    parser->second->p = Vector2f(unit_vector.x*vector_p,unit_vector.y*vector_p);\n//                    i->second->applyImpulse(-unit_vector.x*vector_p/1000,-unit_vector.y*vector_p/1000,i->second->getPosition(),false);\n//                }\n//            }\n//        }\n//\n//        double my_pressure = getPressure(parser->second->coords,20);\n//        Vector2f east_dif = Vector2f((getPressure(parser->second->coords+Vector2f(100,0),100) - my_pressure),0);\n//        Vector2f west_dif = Vector2f(-(getPressure(parser->second->coords+Vector2f(-100,0),100) - my_pressure),0);\n//        Vector2f south_dif = Vector2f(0,(getPressure(parser->second->coords+Vector2f(0,100),100) - my_pressure));\n//        Vector2f north_dif = Vector2f(0,-(getPressure(parser->second->coords+Vector2f(0,-100),100) - my_pressure));\n//\n//        Vector2f net_vector = east_dif + west_dif + south_dif + north_dif;\n//        Vector2f impulse = net_vector*(-50*(parser->second->properties->get(\"molar_mass\")*parser->second->kilomoles)*dt);\n//        parser->second->applyImpulse(impulse.x,impulse.y);\n//\n//        if(too_far_out){\n//           trash(parser->first);\n//        }\n//\n//    }\n//    for(map<string, shared_ptr<Cloud> >::iterator i = clouds.begin(); i != clouds.end(); i++) //run per-loop operations on object\n//    {\n//        i->second->run(dt);\n//    }\n\n    for(map<string, shared_ptr<Bond> >::iterator i = bonds.begin(); i != bonds.end(); i++)\n    {\n        i->second->applyBond(dt);\n    }\n    for(map<string, shared_ptr<Connector> >::iterator i = connectors.begin(); i != connectors.end(); i++) //run per-loop operations on object\n    {\n        i->second->updateSprite();\n    }\n    for(map<string,shared_ptr<Effect> >::iterator i = effects.begin(); i != effects.end(); i++)\n    {\n        i->second->run(dt);\n    }\n\n\n    //COLLISION DETECTION AND RESPONSE\n\n    collision_grid.processCollisions(dt);\n    floor_grid.processCollisions(dt);\n\n    for(map<string,shared_ptr<Field> >::iterator i = fields.begin(); i != fields.end(); i++){\n        if(i->second->grid_cells.size() == 0){\n            collision_grid.insertField(i->first);\n        }\n    }\n    collision_grid.processFields();\n    //\n\n    //HANDLE REMOVAL OF OBJECTS SCHEDULED FOR DELETION\n    emptyGarbageBin();\n\n    //\n\n    \n    if(connectors.size() != last_connectors.size()){\n        resortAllObjectsIntoBonds();\n        last_connectors = connectors;\n    }\n\n   //DRAW here\n\n\n}\n\nvoid Sector::drawBackdrop(){\n\n    window.draw(backdrop);\n}\n\nvoid Sector::draw(){\n\n    for(map<string, shared_ptr<Floor> >::iterator i = floors.begin(); i != floors.end(); i++) //run per-loop operations on floor\n    {\n        i->second->draw();\n    }\n    for(map<string, shared_ptr<Field> >::iterator i = fields.begin(); i != fields.end(); i++) //run per-loop operations on floor\n    {\n        i->second->draw();\n    }\n    for(vector<Sprite>::iterator i = lights.begin(); i != lights.end(); i++){\n\n        window.draw(*i);\n    }\n    lights.clear();\n    for(map<string, shared_ptr<Connector> >::iterator i = connectors.begin(); i != connectors.end(); i++) //run per-loop operations on object\n    {\n        if(i->second->classification == \"MOUNTER\"){\n            i->second->draw();\n        }\n    }\n\n    set<string> draw_again;\n    for(map<string, shared_ptr<Entity> >::iterator i = ents.begin(); i != ents.end(); i++) //run per-loop operations on object\n    {\n        i->second->draw();\n        if(i->second->double_draw){draw_again.insert(i->first);}\n    }\n    for(set<string>::iterator i = draw_again.begin(); i != draw_again.end(); i++){\n        ents[*i]->draw();\n    }\n    for(map<string, shared_ptr<Connector> >::iterator i = connectors.begin(); i != connectors.end(); i++) //run per-loop operations on object\n    {\n        if(i->second->classification == \"CONNECTOR\"){\n            i->second->draw();\n        }\n    }\n    for(map<string, shared_ptr<Poster> >::iterator i = posters.begin(); i != posters.end(); i++) //run per-loop operations on object\n    {\n        i->second->draw();\n    }\n    for(map<string, shared_ptr<Interface> >::iterator i = interfaces.begin(); i != interfaces.end(); i++)\n    {\n        i->second->draw();\n    }\n    for(map<string, shared_ptr<Rope> >::iterator i = ropes.begin(); i != ropes.end(); i++)\n    {\n        i->second->draw();\n    }\n\n   // for(map<string, shared_ptr<Cloud> >::iterator i = clouds.begin();i!=clouds.end(); i++){\n    //    i->second->draw();\n   // }\n    for(map<string,shared_ptr<Effect> >::iterator i = effects.begin(); i != effects.end(); i++)\n    {\n        i->second->draw();\n    }\n}\n\n//double Sector::getPressure(Vector2f coords, double radius){\n//\n//    double kilograms = 0;\n//    double area = (2*M_PI*radius)/80;\n//\n//    for(map<string,shared_ptr<Cloud> >::iterator parser = clouds.begin(); parser!= clouds.end(); parser++){\n//        if(parser->second->inRange(coords, radius)){\n//\n//            kilograms += (parser->second->kilomoles*parser->second->properties->get(\"molar_mass\"));\n//        }\n//    }\n//\n//    return kilograms/area; //kilograms per 80 pixels^2 (m^2)\n//}\n\n//\n//map<string, double> Sector::liftKilograms(Vector2f coords, double radius, double kg){\n//\n//\n//    map<string, double> return_quantities;\n//\n//    set<string> delete_list;\n//\n//    map<string,double> composition; //second part is mass at first, then later is converted to kg to take\n//    double total_mass = 0;\n//\n//    for(map<string, shared_ptr<Cloud> >::iterator parser = clouds.begin(); parser!=clouds.end(); parser++){\n//        if(parser->second->inRange(coords, radius)){\n//\n//            if(composition.count(parser->second->properties->name)==0){\n//                composition[parser->second->properties->name] = (parser->second->kilomoles*parser->second->properties->get(\"molar_mass\"));\n//            }\n//            else{\n//                composition[parser->second->properties->name] += (parser->second->kilomoles*parser->second->properties->get(\"molar_mass\"));\n//            }\n//            total_mass += (parser->second->kilomoles*parser->second->properties->get(\"molar_mass\"));\n//\n//        }\n//    }\n//\n//    for(map<string,double>::iterator parser = composition.begin(); parser != composition.end(); parser++){\n//\n//        parser->second = kg*(parser->second/total_mass);\n//    }\n//\n//    for(map<string, shared_ptr<Cloud> >::iterator parser = clouds.begin(); parser!=clouds.end(); parser++){\n//\n//        if(parser->second->inRange(coords,radius)){\n//\n//            if(return_quantities.count(parser->second->properties->name)==0){\n//                return_quantities[parser->second->properties->name] = 0;\n//            }\n//\n//            double kg_needed = composition[parser->second->properties->name] - return_quantities[parser->second->properties->name]*parser->second->properties->get(\"molar_mass\");\n//            if(kg_needed > 0){\n//\n//                if(kg_needed > parser->second->kilomoles*parser->second->properties->get(\"molar_mass\")){\n//                    kg_needed = parser->second->kilomoles*parser->second->properties->get(\"molar_mass\");\n//                }\n//\n//                parser->second->kilomoles -= kg_needed/parser->second->properties->get(\"molar_mass\");\n//                return_quantities[parser->second->properties->name] += kg_needed/parser->second->properties->get(\"molar_mass\");\n//\n//                if(parser->second->kilomoles<1){\n//                    trash(parser->first);\n//                }\n//            }\n//        }\n//    }\n//\n//    return return_quantities;\n//\n//}\n\n\n\nstring Sector::getClassification(string lookup_id){\n\n    if(ents.count(lookup_id) != 0 || floors.count(lookup_id) != 0){\n        if(getEnt(lookup_id)->properties->name==\"Warp Drive\"){\n            return \"WARP DRIVE\";\n        }\n        return getEnt(lookup_id)->properties->classification;\n    }\n    if(connectors.count(lookup_id) != 0){\n        return \"CONNECTOR\";\n    }\n    if(posters.count(lookup_id) != 0){\n        return \"POSTER\";\n    }\n    if(interfaces.count(lookup_id) != 0){\n        return \"INTERFACE\";\n    }\n    if(items.count(lookup_id) != 0){\n        return items[lookup_id]->properties->classification;\n    }\n}\n\nshared_ptr<Entity> Sector::getEnt(string ent_id){\n\n    shared_ptr<Entity> blank;\n\n    if(ents.count(ent_id)!=0){\n        return ents.find(ent_id)->second;\n    }\n    else if(floors.count(ent_id)!=0){\n        return shared_ptr<Entity>(floors.find(ent_id)->second);\n    }\n\n    return blank;\n}\n\n\nshared_ptr<Machine> Sector::getMachine(string ent_id){\n\n    shared_ptr<Machine> blank;\n\n    if(machines.count(ent_id)!=0){\n        return machines[ent_id].lock();\n    }\n    return blank;\n}\n\n\nvoid Sector::trash(string g_id){\n\n    garbage_bin.insert(g_id);\n}\n\nvoid Sector::emptyGarbageBin(){\n\n    for(set<string>::iterator parser = garbage_bin.begin(); parser != garbage_bin.end(); parser++)\n    {\n        collision_grid.removeObject(*parser);\n        floor_grid.removeObject(*parser);\n\n        if(interfaces.count(*parser)!=0){\n            interfaces[*parser]->disconnect();\n            interfaces.erase(*parser);\n        }\n        if(machines.count(*parser)!=0){\n            machines[*parser].lock()->disconnect();\n            machines.erase(*parser);\n        }\n        if(terminals.count(*parser)!=0){\n            terminals.erase(*parser);\n        }\n        if(ents.count(*parser)!=0){\n            ents[*parser]->cleanup();\n            //ents[*parser]->breakdown();\n            ents.erase(*parser);\n        }\n        if(people.count(*parser)!=0){\n            people.erase(*parser);\n        }\n        if(floors.count(*parser)!=0){\n            floors[*parser]->cleanup();\n            floors.erase(*parser);\n        }\n        if(connectors.count(*parser)!=0){\n            connectors[*parser]->cleanup();\n            connectors.erase(*parser);\n        }\n        if(bonds.count(*parser)!=0){\n            bonds[*parser]->cleanup();\n            bonds.erase(*parser);\n        }\n        if(effects.count(*parser)!=0){\n            effects.erase(*parser);\n        }\n        if(items.count(*parser)!=0){\n            items.erase(*parser);\n        }\n        if(fields.count(*parser) != 0){\n            fields.erase(*parser);\n        }\n      //  if(scrap.count(*parser)!=0){\n      //      scrap.erase(*parser);\n     //   }\n        if(ropes.count(*parser)!=0){\n            ropes.erase(*parser);\n        }\n      //  if(clouds.count(garbage_bin[i])!=0){\n         //   clouds.erase(garbage_bin[i]);\n        //}\n\n    }\n    garbage_bin.clear();\n}\n\nvoid Sector::trashEmptyBonds(){\n\n    for(map<string,shared_ptr<Bond> >::iterator parser = bonds.begin(); parser!= bonds.end(); parser++){\n        if(parser->second->members.size()<2){\n           trash(parser->first);\n        }\n    }\n}\n\nvoid Sector::resortIntoBonds(set<string> ent_ids)\n{\n\n    set<string> checked_ents;\n    vector<set<string> > bond_groups;\n\n    while(true)\n    {\n\n        bool none_left = true;\n        string ent_id_to_check;\n        for(set<string>::iterator parser = ent_ids.begin(); parser!=ent_ids.end(); parser++){\n\n            if(checked_ents.count(*parser)==0){\n\n                ent_id_to_check = *parser;\n                none_left=false;\n                break;\n            }\n        }\n\n        if(none_left){break;}\n\n        checked_ents.insert(ent_id_to_check);\n        if(shared_ptr<Entity> ent = getEnt(ent_id_to_check)){\n\n            set<string> new_grouping;\n            new_grouping.insert(ent_id_to_check);\n            ent->getConnected(&new_grouping);\n            bond_groups.push_back(new_grouping);\n\n            for(set<string>::iterator parser = new_grouping.begin(); parser!=new_grouping.end(); parser++){\n\n                checked_ents.insert(*parser);\n            }\n        }\n    }\n\n    for(set<string>::iterator parser = checked_ents.begin(); parser!=checked_ents.end(); parser++){\n\n        if(shared_ptr<Entity> e = getEnt(*parser)){\n\n            if(e->bonded){\n                string bond_id = e->bond;\n                bonds[bond_id]->removeMember(*parser);\n            }\n        }\n    }\n\n    for(vector<set<string> >::iterator parser = bond_groups.begin(); parser!=bond_groups.end(); parser++)\n    {\n        set<string> current_group = *parser;\n        if(current_group.size()<2){continue;}\n\n        makeNewBond(id,current_group);\n    }\n\n    trashEmptyBonds();\n}\n\n\nvoid Sector::resortAllObjectsIntoBonds()\n{\n    set<string> resort_list;\n\n    for(map<string,shared_ptr<Entity> >::iterator parser = ents.begin(); parser!=ents.end(); parser++){\n\n        resort_list.insert(parser->first);\n    }\n    for(map<string,shared_ptr<Floor> >::iterator parser = floors.begin(); parser!=floors.end(); parser++){\n\n        resort_list.insert(parser->first);\n    }\n    resortIntoBonds(resort_list);\n}\n\nvoid Sector::boom(Vector2f coords, double energy, double scaling_per_meter){\n\n    createEffect(id, coords,Vector2f(0,0),\"charged_smoke\");\n\n    double max_dist = (1/scaling_per_meter)*80;\n\n    for(map<string, shared_ptr<Entity> >::iterator parser = ents.begin(); parser != ents.end(); parser++){\n\n        if(parser->first==\"Avalanche\"){continue;}\n\n        Vector2f dist = parser->second->getPosition() - coords;\n        double h = hypot(dist.x,dist.y);\n\n        if(h<max_dist and collision_grid.lineOfSight(parser->first, coords)){\n\n            double energy_at_range = energy - (energy*(scaling_per_meter*(h/80)));\n            if(h!=0 and energy_at_range<1){continue;}\n            Vector2f unit_vector = dist/h;\n\n            if(parser->second->properties->classification==\"ITEM\"){\n                energy_at_range *= 0.005;//empirically determined. theoretically, accounts for the much smaller surface area of a piece of scrap, which makes it much less likely to be struck by the debris of an explosion.\n                double neg = 1;\n                if(rand() % 100<50){neg=-1;}\n               // parser->second->applyRotationalImpulse(neg);//makes scrap spin when explosions happen, to give a \"chaotic\" feeling\n            }\n            parser->second->applyImpulse(unit_vector.x * energy_at_range, unit_vector.y * energy_at_range,parser->second->getPosition(), true ,false);\n        }\n\n    }\n    for(map<string, shared_ptr<Floor> >::iterator parser = floors.begin(); parser != floors.end(); parser++){\n\n        Vector2f dist = parser->second->getPosition() - coords;\n        double h = hypot(dist.x,dist.y);\n\n        if(h<max_dist){\n\n            double energy_at_range = energy - (energy*(scaling_per_meter*(h/80)));\n            if(h!=0 and energy_at_range<1){continue;}\n            Vector2f unit_vector = dist/h;\n\n            parser->second->applyImpulse(unit_vector.x * energy_at_range, unit_vector.y * energy_at_range, parser->second->getPosition(), true,false);\n        }\n\n    }\n\n}\n\nshared_ptr<Sector> getSector(string which_sector){\n\n    return world.sectors[which_sector];\n}\n\nChange::Change(){}\n\nChange::Change(string c_id, Date c_min, Date c_relative){\n\n    id = c_id;\n    min_date = c_min;\n    relative_date = c_relative;\n}\n\nbool Change::trigger(){\n\n    bool can_trigger = true;\n    for(map<string, bool>::iterator parser = prereq_events.begin(); parser != prereq_events.end(); parser++){\n        can_trigger = parser->second;\n        if(!can_trigger){ break; }\n    }\n\n    if(world.date < min_date && can_trigger == true){ can_trigger = false; }\n    if(world.date < calculated_date && can_trigger == true){ can_trigger = false; }\n\n    if(can_trigger){\n        //trigger the change\n\n        TiXmlDocument doc(\"changes/\"+id+\".xml\");\n        bool doc_valid = doc.LoadFile();\n\n        if(not doc_valid){return false;}\n\n        for(TiXmlElement* change_event = doc.FirstChildElement(); change_event != NULL; change_event = change_event->NextSiblingElement()){\n            string event_type = change_event->ValueStr();\n\n            if(event_type == \"AddEntity\")\n            {\n                makeNewEntity(change_event->Attribute(\"sector_id\"), change_event->Attribute(\"id\"), strtod(change_event->FirstChildElement(\"x\")->GetText(),NULL), strtod(change_event->FirstChildElement(\"y\")->GetText(),NULL),strtod(change_event->FirstChildElement(\"rotation\")->GetText(),NULL),change_event->FirstChildElement(\"type\")->GetText());\n                getSector(change_event->Attribute(\"sector_id\"))->ents[\n                change_event->Attribute(\"id\")]->setRotationalVelocity(strtod(change_event->FirstChildElement(\"rotational_velocity\")->GetText(),NULL));\n                getSector(change_event->Attribute(\"sector_id\"))->ents[\n                change_event->Attribute(\"id\")]->setVelocity(strtod(\n                                                                   change_event->FirstChildElement(\"x_velocity\")->GetText(),NULL),strtod(change_event->FirstChildElement(\"y_velocity\")->GetText(),NULL));\n                if(string(\n                          change_event->FirstChildElement(\"slaved\")->GetText()) == \"true\"){\n                    getSector(change_event->Attribute(\"sector_id\"))->ents[change_event->Attribute(\"id\")]->slaved = true;\n                }\n                int i = 1;\n                for(TiXmlElement* sub_element =\n                    change_event->FirstChildElement(\"slot\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"slot\")){\n                    getSector(change_event->Attribute(\"sector_id\"))->ents[change_event->Attribute(\"id\")]->contents[i] = sub_element->GetText();\n                    i++;\n                }\n            }\n            if(event_type == \"AddMachine\")\n            {\n                makeNewMachine(change_event->Attribute(\"sector_id\"),\n                               change_event->Attribute(\"id\"), strtod(change_event->FirstChildElement(\"x\")->GetText(),NULL), strtod(\n                                                                                                                                   change_event->FirstChildElement(\"y\")->GetText(),NULL),strtod(change_event->FirstChildElement(\"rotation\")->GetText(),NULL),change_event->FirstChildElement(\"type\")->GetText(), true);\n                getSector(change_event->Attribute(\"sector_id\"))->ents[\n                change_event->Attribute(\"id\")]->setRotationalVelocity(strtod(change_event->FirstChildElement(\"rotational_velocity\")->GetText(),NULL));\n                getSector(change_event->Attribute(\"sector_id\"))->ents[\n                change_event->Attribute(\"id\")]->setVelocity(strtod(change_event->FirstChildElement(\"x_velocity\")->GetText(),NULL),strtod(\n                                                                                                                                         change_event->FirstChildElement(\"y_velocity\")->GetText(),NULL));\n                if(string(\n                          change_event->FirstChildElement(\"slaved\")->GetText()) == \"true\"){\n                    getSector(change_event->Attribute(\"sector_id\"))->ents[change_event->Attribute(\"id\")]->slaved = true;\n                }\n                int i = 1;\n                for(TiXmlElement* sub_element = change_event->FirstChildElement(\"slot\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"slot\")){\n                    getSector(change_event->Attribute(\"sector_id\"))->ents[change_event->Attribute(\"id\")]->contents[i] = sub_element->GetText();\n                    i++;\n                }\n                for(TiXmlElement* sub_element = change_event->FirstChildElement(\"cell_var\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"cell_var\"))\n                {\n                    getSector(change_event->Attribute(\"sector_id\"))->getMachine(change_event->Attribute(\"id\"))->internal_cells[sub_element->Attribute(\"cell_id\")]->vars[sub_element->Attribute(\"var_id\")] = strtod(sub_element->GetText(),NULL);\n                }\n                for(TiXmlElement* sub_element = change_event->FirstChildElement(\"cell_data\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"cell_data\"))\n                {\n                    if(sub_element->GetText() == NULL){\n                        getSector(change_event->Attribute(\"sector_id\"))->getMachine(change_event->Attribute(\"id\"))->internal_cells[sub_element->Attribute(\"cell_id\")]->data[sub_element->Attribute(\"data_id\")] = \"\";\n                    }\n                    else{\n                        getSector(change_event->Attribute(\"sector_id\"))->getMachine(change_event->Attribute(\"id\"))->internal_cells[sub_element->Attribute(\"cell_id\")]->data[sub_element->Attribute(\"data_id\")] = sub_element->GetText();\n                    }\n                }\n                for(TiXmlElement* sub_element = change_event->FirstChildElement(\"port_connection\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"port_connection\"))\n                {\n                    getSector(change_event->Attribute(\"sector_id\"))->getMachine(change_event->Attribute(\"id\"))->ports[sub_element->Attribute(\"port_id\")]->connection = sub_element->GetText();\n                }\n\n            }\n            if(event_type == \"AddPoster\")\n            {\n                makeNewPoster(change_event->Attribute(\"sector_id\"), change_event->Attribute(\"id\"), change_event->FirstChildElement(\"type\")->GetText(), change_event->FirstChildElement(\"parent_id\")->GetText(), Vector2f(strtod(\n                                                                                                                                                                                                                                change_event->FirstChildElement(\"relative_x\")->GetText(),NULL),strtod(change_event->FirstChildElement(\"relative_y\")->GetText(),NULL)));\n            }\n            if(event_type == \"AddInterface\")\n            {\n                makeNewInterface(change_event->Attribute(\"sector_id\"), change_event->Attribute(\"id\"),\n                                 change_event->FirstChildElement(\"port_id\")->GetText(), change_event->FirstChildElement(\"machine_id\")->GetText(), Vector2f(strtod(change_event->FirstChildElement(\"relative_x\")->GetText(),NULL), strtod(change_event->FirstChildElement(\"relative_y\")->GetText(),NULL)),change_event->FirstChildElement(\"type\")->GetText());\n                for(TiXmlElement* sub_element = change_event->FirstChildElement(\"var_num\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"var_num\"))\n                {\n                    getSector(change_event->Attribute(\"sector_id\"))->interfaces[change_event->Attribute(\"id\")]->var_num[sub_element->Attribute(\"id\")] = strtod(sub_element->GetText(),NULL);\n                }\n            }\n            if(event_type == \"AddTransfer\")\n            {\n                makeNewTransfer(change_event->Attribute(\"sector_id\"), change_event->Attribute(\"id\"), change_event->FirstChildElement(\"port_id_a\")->GetText(), change_event->FirstChildElement(\"port_id_b\")->GetText(), change_event->FirstChildElement(\"machine_id_a\")->GetText(), change_event->FirstChildElement(\"machine_id_b\")->GetText(),change_event->FirstChildElement(\"type\")->GetText());\n                for(TiXmlElement* sub_element = change_event->FirstChildElement(\"var_num\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"var_num\"))\n                {\n                    getSector(change_event->Attribute(\"sector_id\"))->interfaces[change_event->Attribute(\"id\")]->var_num[sub_element->Attribute(\"id\")] = strtod(sub_element->GetText(),NULL);\n                }\n            }\n            if(event_type == \"AddFloor\")\n            {\n                makeNewFloor(change_event->Attribute(\"sector_id\"), change_event->Attribute(\"id\"), strtod(change_event->FirstChildElement(\"x\")->GetText(),NULL), strtod(change_event->FirstChildElement(\"y\")->GetText(),NULL), strtod(change_event->FirstChildElement(\"x_tiles\")->GetText(),NULL), strtod(change_event->FirstChildElement(\"y_tiles\")->GetText(),NULL),strtod(change_event->FirstChildElement(\"rotation\")->GetText(),NULL),\n                             change_event->FirstChildElement(\"type\")->GetText());\n                getSector(change_event->Attribute(\"sector_id\"))->floors[change_event->Attribute(\"id\")]->setRotationalVelocity(strtod(change_event->FirstChildElement(\"rotational_velocity\")->GetText(),NULL));\n                getSector(change_event->Attribute(\"sector_id\"))->floors[change_event->Attribute(\"id\")]->setVelocity(strtod(change_event->FirstChildElement(\"x_velocity\")->GetText(),NULL),strtod(change_event->FirstChildElement(\"y_velocity\")->GetText(),NULL));\n            }\n            if(event_type == \"AddConnector\")\n            {\n                makeNewConnector(change_event->Attribute(\"sector_id\"), change_event->Attribute(\"id\"),\n                                 change_event->FirstChildElement(\"type\")->GetText(), change_event->FirstChildElement(\"A\")->GetText(),\n                                 change_event->FirstChildElement(\"B\")->GetText());\n                getSector(change_event->Attribute(\"sector_id\"))->getEnt(change_event->FirstChildElement(\"A\")->GetText())->connectors.insert(change_event->Attribute(\"id\"));\n                getSector(change_event->Attribute(\"sector_id\"))->getEnt(change_event->FirstChildElement(\"B\")->GetText())->connectors.insert(change_event->Attribute(\"id\"));\n            }\n            if(event_type == \"AddItem\")\n            {\n                registerNewItem(change_event->Attribute(\"sector_id\"), change_event->Attribute(\"id\"), change_event->FirstChildElement(\"type\")->GetText());\n                //getSector(change_event->Attribute(\"sector_id\"))->items[change_event->Attribute(\"id\")]->storage_id = change_event->FirstChildElement(\"storage_id\")->GetText();\n            }\n            if(event_type == \"AddRope\")\n            {\n                getSector(change_event->Attribute(\"sector_id\"))->ropes[change_event->Attribute(\"id\")] = make_shared<Rope>(change_event->Attribute(\"sector_id\"), change_event->Attribute(\"id\"), change_event->FirstChildElement(\"type\")->GetText());\n                for(TiXmlElement* sub_element = change_event->FirstChildElement(\"node\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"node\")){\n                    string attached_id;\n                    if(sub_element->FirstChildElement(\"attached\")->GetText()==NULL){\n                        attached_id = \"\";\n                    }\n                    else{\n                        attached_id = sub_element->FirstChildElement(\"attached\")->GetText();\n                    }\n                    getSector(change_event->Attribute(\"sector_id\"))->ropes[change_event->Attribute(\"id\")]->addExplicitNode(Vector2f(strtod(sub_element->FirstChildElement(\"x\")->GetText(),NULL),strtod(sub_element->FirstChildElement(\"y\")->GetText(),NULL)),Vector2f(strtod(sub_element->FirstChildElement(\"x_velocity\")->GetText(),NULL),strtod(sub_element->FirstChildElement(\"y_velocity\")->GetText(),NULL)),attached_id, Vector2f(strtod(sub_element->FirstChildElement(\"attachment_x\")->GetText(),NULL),strtod(sub_element->FirstChildElement(\"attachment_y\")->GetText(),NULL)));\n\n                }\n            }\n        }\n\n        triggered = true;\n    }\n\n    return can_trigger;\n}\n\nvoid Change::updateFlags(){\n\n    for(map<string, bool>::iterator parser = prereq_events.begin(); parser != prereq_events.end(); parser++){\n        if(!parser->second){\n            if(world.enacted_changes.count(parser->first) != 0){\n                parser->second = true;\n                calculated_date = world.enacted_changes[parser->first] + relative_date;\n            }\n        }\n    }\n}\n\nWorld::World(){}\n\nvoid World::transfer(string origin_sector_id, string transfer_ent_id, string target_sector_id, Vector2f target_sector_spawn){\n\n    transfers[transfer_ent_id] = make_pair(origin_sector_id, make_pair(target_sector_id, target_sector_spawn));\n\n}\n\nvoid World::getRestingBonded(string ent_id, map<string,Vector2f> &ents_to_move, string origin_sector_id, string transfer_ent_id, string target_sector_id, Vector2f target_sector_spawn){\n\n    ents_to_move[ent_id] = sectors[origin_sector_id]->getEnt(ent_id)->getPosition() - sectors[origin_sector_id]->getEnt(transfer_ent_id)->getPosition();\n    if(sectors[origin_sector_id]->getEnt(ent_id)->bonded){\n        for(set<string>::iterator parser = sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->getEnt(ent_id)->bond]->members.begin(); parser != sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->getEnt(ent_id)->bond]->members.end(); parser++){\n            ents_to_move[*parser] = sectors[origin_sector_id]->getEnt(*parser)->getPosition() - sectors[origin_sector_id]->getEnt(transfer_ent_id)->getPosition();\n            if(sectors[origin_sector_id]->floors.count(*parser) != 0){\n                for(set<string>::iterator parser_2 = sectors[origin_sector_id]->floors[*parser]->passengers.begin(); parser_2 != sectors[origin_sector_id]->floors[*parser]->passengers.end(); parser_2++){\n                    getRestingBonded(*parser_2, ents_to_move, origin_sector_id, transfer_ent_id, target_sector_id, target_sector_spawn);\n                }\n            }\n        }\n    }\n}\n\nvoid World::processTransfers(){\n\n    for(map<string,pair<string,pair<string, Vector2f> > >::iterator a = transfers.begin(); a != transfers.end(); a++){\n        string origin_sector_id = a->second.first;\n        string transfer_ent_id = a->first;\n        string target_sector_id = a->second.second.first;\n        Vector2f target_sector_spawn = a->second.second.second;\n        Vector2f origin_position = sectors[origin_sector_id]->getEnt(transfer_ent_id)->getPosition();\n\n        if(sectors[origin_sector_id]->ents.count(transfer_ent_id) != 0){\n\n            if(sectors[origin_sector_id]->ents[transfer_ent_id]->bonded){\n\n                if(!sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->ents[transfer_ent_id]->bond]->moveable){return;}//refuses transfer if bond contains things bound to sector\n\n                map<string,Vector2f> ents_to_move;\n\n                Vector2f new_velocity =  sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->ents[transfer_ent_id]->bond]->p/sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->ents[transfer_ent_id]->bond]->mass;\n                double new_rot_velocity = sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->ents[transfer_ent_id]->bond]->rot_p/sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->ents[transfer_ent_id]->bond]->getInertia();\n                for(set<string>::iterator parser = sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->ents[transfer_ent_id]->bond]->members.begin(); parser != sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->ents[transfer_ent_id]->bond]->members.end(); parser++){\n                    //for every member in the bond\n                    ents_to_move[*parser] = sectors[origin_sector_id]->getEnt(*parser)->getPosition() - sectors[origin_sector_id]->getEnt(transfer_ent_id)->getPosition();\n                    if(sectors[origin_sector_id]->floors.count(*parser)!=0){\n                        //for everything resting loose on a floor in the bond\n\n                        for(set<string>::iterator parser_2 = sectors[origin_sector_id]->floors[*parser]->passengers.begin(); parser_2 != sectors[origin_sector_id]->floors[*parser]->passengers.end(); parser_2++){\n\n                            getRestingBonded(*parser_2, ents_to_move, origin_sector_id, transfer_ent_id, target_sector_id, target_sector_spawn);\n                        }\n                    }\n                }\n                for(map<string,Vector2f>::iterator parser = ents_to_move.begin(); parser != ents_to_move.end(); parser++){\n                    for(set<string>::iterator parser_2 = sectors[origin_sector_id]->getEnt(parser->first)->connectors.begin(); parser_2 != sectors[origin_sector_id]->getEnt(parser->first)->connectors.end(); parser_2++){\n                        if(sectors[target_sector_id]->connectors.count(*parser_2)==0){\n                            sectors[target_sector_id]->connectors[*parser_2] = sectors[origin_sector_id]->connectors[*parser_2];\n                            sectors[origin_sector_id]->connectors[*parser_2]->sector_id = target_sector_id;\n                            sectors[origin_sector_id]->connectors.erase(*parser_2);\n                        }\n                    }\n                    for(map<int,string>::iterator parser_2 = sectors[origin_sector_id]->getEnt(parser->first)->contents.begin(); parser_2 != sectors[origin_sector_id]->getEnt(parser->first)->contents.end(); parser_2++){\n                        if(parser_2->second == \"\"){continue;}\n                        sectors[target_sector_id]->items[parser_2->second] = sectors[origin_sector_id]->items[parser_2->second];\n                        sectors[origin_sector_id]->items[parser_2->second]->sector_id = target_sector_id;\n                        sectors[origin_sector_id]->items.erase(parser_2->second);\n                    }\n                    sectors[origin_sector_id]->getEnt(parser->first)->bonded = false;\n                    sectors[origin_sector_id]->getEnt(parser->first)->bond = \"\";\n                    sectors[origin_sector_id]->getEnt(parser->first)->setVelocity(new_velocity.x,new_velocity.y);\n                    sectors[origin_sector_id]->getEnt(parser->first)->setRotationalVelocity(new_rot_velocity);\n                    if(sectors[origin_sector_id]->ents.count(parser->first) != 0){\n                        sectors[target_sector_id]->ents[parser->first] = sectors[origin_sector_id]->ents[parser->first];\n                        sectors[origin_sector_id]->ents.erase(parser->first);\n                        sectors[target_sector_id]->ents[parser->first]->sector_id = target_sector_id;\n                        sectors[target_sector_id]->ents[parser->first]->setPosition(target_sector_spawn.x + parser->second.x,target_sector_spawn.y + parser->second.y);\n\n                        if(sectors[origin_sector_id]->machines.count(parser->first) != 0){\n                            sectors[target_sector_id]->machines[parser->first] = sectors[origin_sector_id]->machines[parser->first];\n                            for(map<string, shared_ptr<FlowPort> >::iterator parser_3 = sectors[origin_sector_id]->machines[parser->first].lock()->ports.begin(); parser_3 != sectors[origin_sector_id]->machines[parser->first].lock()->ports.end(); parser_3++){\n                                parser_3->second->sector_id = target_sector_id;\n                                if(parser_3->second->connection!=\"\"){\n                                    if(sectors[origin_sector_id]->ropes.count(parser_3->second->connection)!=0){\n                                        if(ents_to_move.count(sectors[origin_sector_id]->interfaces[parser_3->second->connection]->machine_id_2)!=0 && ents_to_move.count(sectors[origin_sector_id]->interfaces[parser_3->second->connection]->machine_id)!=0){\n                                            //copy rope and interface\n                                            if(sectors[target_sector_id]->interfaces.count(parser_3->second->connection)==0){\n                                                sectors[target_sector_id]->interfaces[parser_3->second->connection] = sectors[origin_sector_id]->interfaces[parser_3->second->connection];\n                                                sectors[origin_sector_id]->interfaces[parser_3->second->connection]->sector_id = target_sector_id;\n                                                sectors[origin_sector_id]->interfaces.erase(parser_3->second->connection);\n                                            }\n                                            sectors[target_sector_id]->ropes[parser_3->second->connection] = sectors[origin_sector_id]->ropes[parser_3->second->connection];\n                                            sectors[origin_sector_id]->ropes[parser_3->second->connection]->sector_id = target_sector_id;\n                                            for(vector<shared_ptr<RopeNode> >::iterator nodes = sectors[origin_sector_id]->ropes[parser_3->second->connection]->nodes.begin(); nodes != sectors[origin_sector_id]->ropes[parser_3->second->connection]->nodes.end(); nodes++){\n                                                shared_ptr<RopeNode> temp = *nodes;\n                                                temp->sector_id = target_sector_id;\n                                                temp->coords = (temp->coords - origin_position) + target_sector_spawn;\n                                                temp->sprite.setPosition(temp->coords.x,temp->coords.y);\n                                            }\n                                            sectors[origin_sector_id]->ropes.erase(parser_3->second->connection);\n                                        }\n                                        else{\n                                            //disconnect interface and delete rope\n                                            sectors[origin_sector_id]->trash(parser_3->second->connection);\n                                        }\n                                    }\n                                    else if(sectors[target_sector_id]->interfaces.count(parser_3->second->connection)==0){\n                                        sectors[target_sector_id]->interfaces[parser_3->second->connection] = sectors[origin_sector_id]->interfaces[parser_3->second->connection];\n                                        sectors[origin_sector_id]->interfaces[parser_3->second->connection]->sector_id = target_sector_id;\n                                        sectors[origin_sector_id]->interfaces.erase(parser_3->second->connection);\n                                    }\n                                }\n                            }\n                            sectors[origin_sector_id]->machines.erase(parser->first);\n                        }\n                        if(sectors[origin_sector_id]->terminals.count(parser->first) != 0){\n                            sectors[target_sector_id]->terminals[parser->first] = sectors[origin_sector_id]->terminals[parser->first];\n                            sectors[origin_sector_id]->terminals.erase(parser->first);\n                        }\n                        if(sectors[origin_sector_id]->people.count(parser->first) != 0){\n                            sectors[target_sector_id]->people[parser->first] = sectors[origin_sector_id]->people[parser->first];\n                            sectors[origin_sector_id]->people.erase(parser->first);\n                        }\n                    }\n                    if(sectors[origin_sector_id]->floors.count(parser->first) != 0){\n                        sectors[target_sector_id]->floors[parser->first] = sectors[origin_sector_id]->floors[parser->first];\n                        sectors[origin_sector_id]->floors.erase(parser->first);\n                        sectors[target_sector_id]->floors[parser->first]->sector_id = target_sector_id;\n                        sectors[target_sector_id]->floors[parser->first]->setPosition(target_sector_spawn.x + parser->second.x,target_sector_spawn.y + parser->second.y);\n                    }\n\n                }\n                continue;\n            }\n            if(sectors[origin_sector_id]->ents[transfer_ent_id]->bound_to_sector){\n                continue;\n            }\n            if(sectors[origin_sector_id]->machines.count(transfer_ent_id) != 0){\n                bool is_connected = false;\n                for(map<string, shared_ptr<FlowPort> >::iterator parser = sectors[origin_sector_id]->machines[transfer_ent_id].lock()->ports.begin(); parser != sectors[origin_sector_id]->machines[transfer_ent_id].lock()->ports.end(); parser++){\n                    if(parser->second->isConnected()){\n                        is_connected = true;\n                        break;\n                    }\n                }\n                if(is_connected){\n                    continue;\n                }\n            }\n\n            for(map<int,string>::iterator parser_2 = sectors[origin_sector_id]->getEnt(transfer_ent_id)->contents.begin(); parser_2 != sectors[origin_sector_id]->getEnt(transfer_ent_id)->contents.end(); parser_2++){\n                if(parser_2->second == \"\"){continue;}\n                sectors[target_sector_id]->items[parser_2->second] = sectors[origin_sector_id]->items[parser_2->second];\n                sectors[origin_sector_id]->items[parser_2->second]->sector_id = target_sector_id;\n                sectors[origin_sector_id]->items.erase(parser_2->second);\n            }\n\n            sectors[target_sector_id]->ents[transfer_ent_id] = sectors[origin_sector_id]->ents[transfer_ent_id];\n            sectors[origin_sector_id]->ents.erase(transfer_ent_id);\n            sectors[target_sector_id]->ents[transfer_ent_id]->sector_id = target_sector_id;\n            sectors[target_sector_id]->ents[transfer_ent_id]->setPosition(target_sector_spawn.x,target_sector_spawn.y);\n\n\n            if(sectors[origin_sector_id]->machines.count(transfer_ent_id) != 0){\n                sectors[target_sector_id]->machines[transfer_ent_id] = sectors[origin_sector_id]->machines[transfer_ent_id];\n                for(map<string, shared_ptr<FlowPort> >::iterator parser_3 = sectors[origin_sector_id]->machines[transfer_ent_id].lock()->ports.begin(); parser_3 != sectors[origin_sector_id]->machines[transfer_ent_id].lock()->ports.end(); parser_3++){\n                    parser_3->second->sector_id = target_sector_id;\n                    if(parser_3->second->connection!=\"\"){\n                        if(sectors[origin_sector_id]->ropes.count(parser_3->second->connection)!=0){\n                            sectors[origin_sector_id]->trash(parser_3->second->connection);\n                        }\n                        else if(sectors[target_sector_id]->interfaces.count(parser_3->second->connection)==0){\n                            sectors[target_sector_id]->interfaces[parser_3->second->connection] = sectors[origin_sector_id]->interfaces[parser_3->second->connection];\n                            sectors[origin_sector_id]->interfaces[parser_3->second->connection]->sector_id = target_sector_id;\n                            sectors[origin_sector_id]->interfaces.erase(parser_3->second->connection);\n                        }\n                    }\n                }\n                sectors[origin_sector_id]->machines.erase(transfer_ent_id);\n            }\n            if(sectors[origin_sector_id]->terminals.count(transfer_ent_id) != 0){\n                sectors[target_sector_id]->terminals[transfer_ent_id] = sectors[origin_sector_id]->terminals[transfer_ent_id];\n                sectors[origin_sector_id]->terminals.erase(transfer_ent_id);\n            }\n            if(sectors[origin_sector_id]->people.count(transfer_ent_id) != 0){\n                sectors[target_sector_id]->people[transfer_ent_id] = sectors[origin_sector_id]->people[transfer_ent_id];\n                sectors[origin_sector_id]->people.erase(transfer_ent_id);\n            }\n        }\n        if(sectors[origin_sector_id]->floors.count(transfer_ent_id) != 0){\n\n            if(sectors[origin_sector_id]->floors[transfer_ent_id]->bonded){\n\n                if(!sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->floors[transfer_ent_id]->bond]->moveable){return;}//refuses transfer if bond contains things bound to sector\n\n                map<string,Vector2f> ents_to_move;\n                Vector2f new_velocity =  sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->ents[transfer_ent_id]->bond]->p/sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->ents[transfer_ent_id]->bond]->mass;\n                double new_rot_velocity = sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->ents[transfer_ent_id]->bond]->rot_p/sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->ents[transfer_ent_id]->bond]->getInertia();\n                for(set<string>::iterator parser = sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->floors[transfer_ent_id]->bond]->members.begin(); parser != sectors[origin_sector_id]->bonds[sectors[origin_sector_id]->floors[transfer_ent_id]->bond]->members.end(); parser++){\n                    //for every member in the bond\n                    ents_to_move[*parser] = sectors[origin_sector_id]->getEnt(*parser)->getPosition() - sectors[origin_sector_id]->getEnt(transfer_ent_id)->getPosition();\n                    if(sectors[origin_sector_id]->floors.count(*parser)!=0){\n                        //for everything resting loose on a floor in the bond\n                        for(set<string>::iterator parser_2 = sectors[origin_sector_id]->floors[*parser]->passengers.begin(); parser_2 != sectors[origin_sector_id]->floors[*parser]->passengers.end(); parser_2++){\n                            getRestingBonded(*parser_2, ents_to_move, origin_sector_id, transfer_ent_id, target_sector_id, target_sector_spawn);\n                        }\n                    }\n                }\n                for(map<string,Vector2f>::iterator parser = ents_to_move.begin(); parser != ents_to_move.end(); parser++){\n                    for(set<string>::iterator parser_2 = sectors[origin_sector_id]->getEnt(parser->first)->connectors.begin(); parser_2 != sectors[origin_sector_id]->getEnt(parser->first)->connectors.end(); parser_2++){\n                        if(sectors[target_sector_id]->connectors.count(*parser_2)==0){\n                            sectors[target_sector_id]->connectors[*parser_2] = sectors[origin_sector_id]->connectors[*parser_2];\n                            sectors[origin_sector_id]->connectors[*parser_2]->sector_id = target_sector_id;\n                            sectors[origin_sector_id]->trash(*parser_2);\n                        }\n                    }\n                    for(map<int,string>::iterator parser_2 = sectors[origin_sector_id]->getEnt(parser->first)->contents.begin(); parser_2 != sectors[origin_sector_id]->getEnt(parser->first)->contents.end(); parser_2++){\n                        if(parser_2->second == \"\"){continue;}\n                        sectors[target_sector_id]->items[parser_2->second] = sectors[origin_sector_id]->items[parser_2->second];\n                        sectors[origin_sector_id]->items[parser_2->second]->sector_id = target_sector_id;\n                        sectors[origin_sector_id]->items.erase(parser_2->second);\n                    }\n\n                    sectors[origin_sector_id]->getEnt(parser->first)->bonded = false;\n                    sectors[origin_sector_id]->getEnt(parser->first)->bond = \"\";\n                    sectors[origin_sector_id]->getEnt(parser->first)->setVelocity(new_velocity.x,new_velocity.y);\n                    sectors[origin_sector_id]->getEnt(parser->first)->setRotationalVelocity(new_rot_velocity);\n                    if(sectors[origin_sector_id]->ents.count(parser->first) != 0){\n                        sectors[target_sector_id]->ents[parser->first] = sectors[origin_sector_id]->ents[parser->first];\n                        sectors[origin_sector_id]->ents.erase(parser->first);\n                        sectors[target_sector_id]->ents[parser->first]->sector_id = target_sector_id;\n                        sectors[target_sector_id]->ents[parser->first]->setPosition(target_sector_spawn.x + parser->second.x,target_sector_spawn.y + parser->second.y);\n\n                        if(sectors[origin_sector_id]->machines.count(parser->first) != 0){\n                            sectors[target_sector_id]->machines[parser->first] = sectors[origin_sector_id]->machines[parser->first];\n                            for(map<string, shared_ptr<FlowPort> >::iterator parser_3 = sectors[origin_sector_id]->machines[parser->first].lock()->ports.begin(); parser_3 != sectors[origin_sector_id]->machines[parser->first].lock()->ports.end(); parser_3++){\n                                parser_3->second->sector_id = target_sector_id;\n\n                                if(parser_3->second->connection!=\"\"){\n                                    if(sectors[origin_sector_id]->ropes.count(parser_3->second->connection)!=0){\n                                        if(ents_to_move.count(sectors[origin_sector_id]->interfaces[parser_3->second->connection]->machine_id_2)!=0 && ents_to_move.count(sectors[origin_sector_id]->interfaces[parser_3->second->connection]->machine_id)!=0){\n                                            //copy rope and interface\n                                            if(sectors[target_sector_id]->interfaces.count(parser_3->second->connection)==0){\n                                                sectors[target_sector_id]->interfaces[parser_3->second->connection] = sectors[origin_sector_id]->interfaces[parser_3->second->connection];\n                                                sectors[origin_sector_id]->interfaces[parser_3->second->connection]->sector_id = target_sector_id;\n                                                sectors[origin_sector_id]->interfaces.erase(parser_3->second->connection);\n                                            }\n                                            sectors[target_sector_id]->ropes[parser_3->second->connection] = sectors[origin_sector_id]->ropes[parser_3->second->connection];\n                                            sectors[origin_sector_id]->ropes[parser_3->second->connection]->sector_id = target_sector_id;\n                                            for(vector<shared_ptr<RopeNode> >::iterator nodes = sectors[origin_sector_id]->ropes[parser_3->second->connection]->nodes.begin(); nodes != sectors[origin_sector_id]->ropes[parser_3->second->connection]->nodes.end(); nodes++){\n                                                shared_ptr<RopeNode> temp = *nodes;\n                                                temp->sector_id = target_sector_id;\n                                                temp->coords = (temp->coords - origin_position) + target_sector_spawn;\n                                                temp->sprite.setPosition(temp->coords.x,temp->coords.y);\n                                            }\n                                            sectors[origin_sector_id]->ropes.erase(parser_3->second->connection);\n                                        }\n                                        else{\n                                            //disconnect interface and delete rope\n                                            sectors[origin_sector_id]->trash(parser_3->second->connection);\n                                        }\n                                    }\n                                    else if(sectors[target_sector_id]->interfaces.count(parser_3->second->connection)==0){\n                                        sectors[target_sector_id]->interfaces[parser_3->second->connection] = sectors[origin_sector_id]->interfaces[parser_3->second->connection];\n                                        sectors[origin_sector_id]->interfaces[parser_3->second->connection]->sector_id = target_sector_id;\n                                        sectors[origin_sector_id]->interfaces.erase(parser_3->second->connection);\n                                    }\n                                }\n                            }\n                            sectors[origin_sector_id]->machines.erase(parser->first);\n                        }\n                        if(sectors[origin_sector_id]->terminals.count(parser->first) != 0){\n                            sectors[target_sector_id]->terminals[parser->first] = sectors[origin_sector_id]->terminals[parser->first];\n                            sectors[origin_sector_id]->terminals.erase(parser->first);\n                        }\n                        if(sectors[origin_sector_id]->people.count(parser->first) != 0){\n                            sectors[target_sector_id]->people[parser->first] = sectors[origin_sector_id]->people[parser->first];\n                            sectors[origin_sector_id]->people.erase(parser->first);\n                        }\n                    }\n                    if(sectors[origin_sector_id]->floors.count(parser->first) != 0){\n                        sectors[target_sector_id]->floors[parser->first] = sectors[origin_sector_id]->floors[parser->first];\n                        sectors[origin_sector_id]->floors.erase(parser->first);\n                        sectors[target_sector_id]->floors[parser->first]->sector_id = target_sector_id;\n                        sectors[target_sector_id]->floors[parser->first]->setPosition(target_sector_spawn.x + parser->second.x,target_sector_spawn.y + parser->second.y);\n                    }\n\n                }\n                continue;\n            }\n            if(sectors[origin_sector_id]->floors[transfer_ent_id]->bound_to_sector){\n                continue;\n            }\n\n            for(map<int,string>::iterator parser_2 = sectors[origin_sector_id]->getEnt(transfer_ent_id)->contents.begin(); parser_2 != sectors[origin_sector_id]->getEnt(transfer_ent_id)->contents.end(); parser_2++){\n                if(parser_2->second == \"\"){continue;}\n                sectors[target_sector_id]->items[parser_2->second] = sectors[origin_sector_id]->items[parser_2->second];\n                sectors[origin_sector_id]->items[parser_2->second]->sector_id = target_sector_id;\n                sectors[origin_sector_id]->items.erase(parser_2->second);\n            }\n\n            sectors[target_sector_id]->floors[transfer_ent_id] = sectors[origin_sector_id]->floors[transfer_ent_id];\n            sectors[origin_sector_id]->floors.erase(transfer_ent_id);\n            sectors[target_sector_id]->floors[transfer_ent_id]->sector_id = target_sector_id;\n            sectors[target_sector_id]->floors[transfer_ent_id]->setPosition(target_sector_spawn.x,target_sector_spawn.y);\n        }\n\n        sectors[target_sector_id]->resortAllObjectsIntoBonds();\n    }\n    transfers.clear();\n}\n\nvoid World::enactChanges(){\n\n    for(map<string, shared_ptr<Change> >::iterator parser = changes.begin(); parser != changes.end(); parser++){\n        if(parser->second->triggered){continue;}\n        parser->second->updateFlags();\n\n        if(parser->second->trigger()){\n\n            enacted_changes[parser->first] = date;\n        }\n    }\n}\n\nvoid World::generateStation(double seed){\n\n    string sector_id = \"main\";\n    sectors[sector_id] = make_shared<Sector>(sector_id, 10000,\"backdrops\\\\sand_default.png\",200,true);\n\n    makeNewFloor(sector_id, createUniqueId(), 0, 0, 5, 5, 0,\"Station Floor\");\n    makeNewFloor(sector_id, createUniqueId(), 1200, 100, 2, 1, 0,\"Steel Floor\");\n}\n\nbool World::saveWorldToFile(string worldsavename)\n{\n    TiXmlDocument main_index(\"saves\\\\index.xml\");\n    main_index.LoadFile();\n    bool index_exists = false;\n    for(TiXmlElement* save_parser = main_index.FirstChildElement(\"Save\"); save_parser != NULL; save_parser = save_parser->NextSiblingElement(\"Save\")){\n        if(save_parser->GetText() == worldsavename){\n            index_exists = true;\n            continue;\n        }\n    }\n    if(!index_exists){\n        TiXmlElement* index_listing = new TiXmlElement(\"Save\");\n        index_listing->LinkEndChild(new TiXmlText(worldsavename));\n        main_index.LinkEndChild(index_listing);\n    }\n    main_index.SaveFile(\"saves\\\\index.xml\");\n\n    TiXmlDocument doc; //index\n    TiXmlDeclaration* decl = new TiXmlDeclaration(\"1.0\", \"\", \"\");\n    doc.LinkEndChild(decl);\n\n    TiXmlElement* world_entry = new TiXmlElement(\"World\");\n    world_entry->SetAttribute(\"id\",worldsavename);\n    doc.LinkEndChild(world_entry);\n\n    for(map<string,shared_ptr<Sector> >::iterator i = sectors.begin(); i!=sectors.end(); i++)\n    {\n        TiXmlElement* index_entry = new TiXmlElement(\"Sector\");\n        string path_string = \"saves/\" + worldsavename + \"/\" + i->first + \".xml\";\n        index_entry->SetAttribute(\"path\",path_string);\n        world_entry->LinkEndChild(index_entry);\n    }\n\n    string p = \"saves/\" + worldsavename + \"/\";\n    CreateDirectory(p.c_str(),NULL);\n    doc.SaveFile(\"saves/\" + worldsavename + \"/index.xml\");\n\n    //index is done\n\n    for(map<string,shared_ptr<Sector> >::iterator i = sectors.begin(); i!=sectors.end(); i++)\n    {\n        shared_ptr<Sector> sector = i->second;\n\n        TiXmlDocument sector_doc;\n        TiXmlDeclaration* sector_decl = new TiXmlDeclaration(\"1.0\", \"\", \"\");\n        sector_doc.LinkEndChild(sector_decl);\n\n        TiXmlElement* sector_entry = new TiXmlElement(\"Sector\");\n        sector_entry->SetAttribute(\"id\",sector->id);\n        sector_entry->SetAttribute(\"radius\",asString(sector->radius));\n        sector_entry->SetAttribute(\"ambient\",asString(sector->ambient_light));\n        sector_entry->SetAttribute(\"tile\",sector->backdrop_tx_path);\n        if(sector->planetside){\n            sector_entry->SetAttribute(\"planetside\",\"true\");\n        }\n        else{\n            sector_entry->SetAttribute(\"planetside\",\"false\");\n        }\n        sector_doc.LinkEndChild(sector_entry);\n\n        for(map<string,shared_ptr<Entity> >::iterator j = sector->ents.begin(); j!= sector->ents.end(); j++)\n        {\n            shared_ptr<Entity> entity = j->second;\n\n\n            if(entity->properties->classification == \"ENTITY\" || entity->prop)\n            {\n                TiXmlElement* object_entry = new TiXmlElement(\"Entity\");\n                object_entry->SetAttribute(\"id\",entity->id);\n                sector_entry->LinkEndChild(object_entry);\n\n                TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n                subentry_1->LinkEndChild(new TiXmlText(entity->properties->name));\n                object_entry->LinkEndChild(subentry_1);\n\n                TiXmlElement* subentry_2 = new TiXmlElement(\"x\");\n                subentry_2->LinkEndChild(new TiXmlText(asString(entity->coords.x)));\n                object_entry->LinkEndChild(subentry_2);\n\n                TiXmlElement* subentry_3 = new TiXmlElement(\"y\");\n                subentry_3->LinkEndChild(new TiXmlText(asString(entity->coords.y)));\n                object_entry->LinkEndChild(subentry_3);\n\n                TiXmlElement* subentry_4 = new TiXmlElement(\"x_velocity\");\n                subentry_4->LinkEndChild(new TiXmlText(asString(entity->getVelocity().x)));\n                object_entry->LinkEndChild(subentry_4);\n\n                TiXmlElement* subentry_5 = new TiXmlElement(\"y_velocity\");\n                subentry_5->LinkEndChild(new TiXmlText(asString(entity->getVelocity().y)));\n                object_entry->LinkEndChild(subentry_5);\n\n                TiXmlElement* subentry_6 = new TiXmlElement(\"rotation\");\n                subentry_6->LinkEndChild(new TiXmlText(asString(entity->sprite.getRotation())));\n                object_entry->LinkEndChild(subentry_6);\n\n                TiXmlElement* subentry_7 = new TiXmlElement(\"rotational_velocity\");\n                subentry_7->LinkEndChild(new TiXmlText(asString(entity->getRotationalVelocity())));\n                object_entry->LinkEndChild(subentry_7);\n\n                TiXmlElement* subentry_8 = new TiXmlElement(\"slaved\");\n                if(entity->slaved){ subentry_8->LinkEndChild(new TiXmlText(\"true\"));}\n                else{ subentry_8->LinkEndChild(new TiXmlText(\"false\"));}\n                object_entry->LinkEndChild(subentry_8);\n\n                TiXmlElement* subentry_9 = new TiXmlElement(\"prop\");\n                if(entity->prop){ subentry_9->LinkEndChild(new TiXmlText(\"true\"));}\n                else{ subentry_9->LinkEndChild(new TiXmlText(\"false\"));}\n                object_entry->LinkEndChild(subentry_9);\n\n                for(map<int,string>::iterator slot_parser = entity->contents.begin(); slot_parser != entity->contents.end(); slot_parser++){\n                    if(slot_parser->second!=\"\"){\n                        TiXmlElement* slot_subentry = new TiXmlElement(\"slot\");\n                        slot_subentry->LinkEndChild(new TiXmlText(slot_parser->second));\n                        object_entry->LinkEndChild(slot_subentry);\n                    }\n                }\n            }\n            else if(entity->properties->classification == \"PLAYER\")\n            {\n                TiXmlElement* object_entry = new TiXmlElement(\"Player\");\n                object_entry->SetAttribute(\"id\",entity->id);\n                sector_entry->LinkEndChild(object_entry);\n\n                TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n                subentry_1->LinkEndChild(new TiXmlText(entity->properties->name));\n                object_entry->LinkEndChild(subentry_1);\n\n                TiXmlElement* subentry_2 = new TiXmlElement(\"x\");\n                subentry_2->LinkEndChild(new TiXmlText(asString(entity->coords.x)));\n                object_entry->LinkEndChild(subentry_2);\n\n                TiXmlElement* subentry_3 = new TiXmlElement(\"y\");\n                subentry_3->LinkEndChild(new TiXmlText(asString(entity->coords.y)));\n                object_entry->LinkEndChild(subentry_3);\n\n                TiXmlElement* subentry_4 = new TiXmlElement(\"x_velocity\");\n                subentry_4->LinkEndChild(new TiXmlText(asString(entity->getVelocity().x)));\n                object_entry->LinkEndChild(subentry_4);\n\n                TiXmlElement* subentry_5 = new TiXmlElement(\"y_velocity\");\n                subentry_5->LinkEndChild(new TiXmlText(asString(entity->getVelocity().y)));\n                object_entry->LinkEndChild(subentry_5);\n\n                TiXmlElement* subentry_6 = new TiXmlElement(\"rotation\");\n                subentry_6->LinkEndChild(new TiXmlText(asString(entity->sprite.getRotation())));\n                object_entry->LinkEndChild(subentry_6);\n\n                TiXmlElement* subentry_7 = new TiXmlElement(\"rotational_velocity\");\n                subentry_7->LinkEndChild(new TiXmlText(asString(entity->getRotationalVelocity())));\n                object_entry->LinkEndChild(subentry_7);\n\n                TiXmlElement* subentry_8 = new TiXmlElement(\"slaved\");\n                if(entity->slaved){ subentry_8->LinkEndChild(new TiXmlText(\"true\"));}\n                else{ subentry_8->LinkEndChild(new TiXmlText(\"false\"));}\n                object_entry->LinkEndChild(subentry_8);\n\n                TiXmlElement* subentry_9 = new TiXmlElement(\"prop\");\n                if(entity->prop){ subentry_9->LinkEndChild(new TiXmlText(\"true\"));}\n                else{ subentry_9->LinkEndChild(new TiXmlText(\"false\"));}\n                object_entry->LinkEndChild(subentry_9);\n\n\n                for(map<int,string>::iterator slot_parser = entity->contents.begin(); slot_parser != entity->contents.end(); slot_parser++){\n                    if(slot_parser->second!=\"\"){\n                        TiXmlElement* slot_subentry = new TiXmlElement(\"slot\");\n                        slot_subentry->LinkEndChild(new TiXmlText(slot_parser->second));\n                        object_entry->LinkEndChild(slot_subentry);\n                    }\n                }\n            }\n\n            else if(j->second->properties->classification == \"MACHINE\" || j->second->properties->classification == \"TERMINAL\" || j->second->properties->classification == \"CONTROLBOARD\")\n            {\n\n                TiXmlElement* object_entry = new TiXmlElement(\"Machine\");\n                object_entry->SetAttribute(\"id\",entity->id);\n                sector_entry->LinkEndChild(object_entry);\n\n                TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n                subentry_1->LinkEndChild(new TiXmlText(entity->properties->name));\n                object_entry->LinkEndChild(subentry_1);\n\n                TiXmlElement* subentry_2 = new TiXmlElement(\"x\");\n                subentry_2->LinkEndChild(new TiXmlText(asString(entity->coords.x)));\n                object_entry->LinkEndChild(subentry_2);\n\n                TiXmlElement* subentry_3 = new TiXmlElement(\"y\");\n                subentry_3->LinkEndChild(new TiXmlText(asString(entity->coords.y)));\n                object_entry->LinkEndChild(subentry_3);\n\n                TiXmlElement* subentry_4 = new TiXmlElement(\"x_velocity\");\n                subentry_4->LinkEndChild(new TiXmlText(asString(entity->getVelocity().x)));\n                object_entry->LinkEndChild(subentry_4);\n\n                TiXmlElement* subentry_5 = new TiXmlElement(\"y_velocity\");\n                subentry_5->LinkEndChild(new TiXmlText(asString(entity->getVelocity().y)));\n                object_entry->LinkEndChild(subentry_5);\n\n                TiXmlElement* subentry_6 = new TiXmlElement(\"rotation\");\n                subentry_6->LinkEndChild(new TiXmlText(asString(entity->sprite.getRotation())));\n                object_entry->LinkEndChild(subentry_6);\n\n                TiXmlElement* subentry_7 = new TiXmlElement(\"rotational_velocity\");\n                subentry_7->LinkEndChild(new TiXmlText(asString(entity->getRotationalVelocity())));\n                object_entry->LinkEndChild(subentry_7);\n\n                TiXmlElement* subentry_8 = new TiXmlElement(\"slaved\");\n                if(entity->slaved){ subentry_8->LinkEndChild(new TiXmlText(\"true\"));}\n                else{ subentry_8->LinkEndChild(new TiXmlText(\"false\"));}\n                object_entry->LinkEndChild(subentry_8);\n\n                TiXmlElement* subentry_9 = new TiXmlElement(\"prop\");\n                if(entity->prop){ subentry_9->LinkEndChild(new TiXmlText(\"true\"));}\n                else{ subentry_9->LinkEndChild(new TiXmlText(\"false\"));}\n                object_entry->LinkEndChild(subentry_9);\n\n\n                if(getSector(sector->id)->machines.count(entity->id)){\n                    shared_ptr<Machine> machine = getSector(sector->id)->getMachine(entity->id);\n                    for(map<string, shared_ptr<FlowCell> >::iterator cell_parser = machine->internal_cells.begin(); cell_parser!=machine->internal_cells.end(); cell_parser++){\n                        for(map<string, double>::iterator var_parser = cell_parser->second->vars.begin(); var_parser!=cell_parser->second->vars.end(); var_parser++){\n                            TiXmlElement* cell_entry = new TiXmlElement(\"cell_var\");\n                            cell_entry->SetAttribute(\"cell_id\",cell_parser->first);\n                            cell_entry->SetAttribute(\"var_id\",var_parser->first);\n                            cell_entry->LinkEndChild(new TiXmlText(asString(var_parser->second)));\n                            object_entry->LinkEndChild(cell_entry);\n                        }\n                        for(map<string, string>::iterator data_parser = cell_parser->second->data.begin(); data_parser!=cell_parser->second->data.end(); data_parser++){\n                            TiXmlElement* cell_entry = new TiXmlElement(\"cell_data\");\n                            cell_entry->SetAttribute(\"cell_id\",cell_parser->first);\n                            cell_entry->SetAttribute(\"data_id\",data_parser->first);\n                            cell_entry->LinkEndChild(new TiXmlText(data_parser->second));\n                            object_entry->LinkEndChild(cell_entry);\n                        }\n                    }\n\n                    for(map<string, shared_ptr<FlowPort> >::iterator port_parser = machine->ports.begin(); port_parser!=machine->ports.end(); port_parser++){\n                        if(port_parser->second->connection!=\"\"){\n                            TiXmlElement* port_entry = new TiXmlElement(\"port_connection\");\n                            port_entry->SetAttribute(\"port_id\",port_parser->first);\n                            port_entry->LinkEndChild(new TiXmlText(port_parser->second->connection));\n                            object_entry->LinkEndChild(port_entry);\n                        }\n                    }\n                    for(map<int,string>::iterator slot_parser = entity->contents.begin(); slot_parser != entity->contents.end(); slot_parser++){\n                        if(slot_parser->second!=\"\"){\n                            TiXmlElement* slot_subentry = new TiXmlElement(\"slot\");\n                            slot_subentry->LinkEndChild(new TiXmlText(slot_parser->second));\n                            object_entry->LinkEndChild(slot_subentry);\n                        }\n                    }\n                }\n\n            }\n            else if(j->second->properties->classification == \"CONTAINER\")\n            {\n                TiXmlElement* object_entry = new TiXmlElement(\"Entity\");\n                object_entry->SetAttribute(\"id\",entity->id);\n                sector_entry->LinkEndChild(object_entry);\n\n                TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n                subentry_1->LinkEndChild(new TiXmlText(entity->properties->name));\n                object_entry->LinkEndChild(subentry_1);\n\n                TiXmlElement* subentry_2 = new TiXmlElement(\"x\");\n                subentry_2->LinkEndChild(new TiXmlText(asString(entity->coords.x)));\n                object_entry->LinkEndChild(subentry_2);\n\n                TiXmlElement* subentry_3 = new TiXmlElement(\"y\");\n                subentry_3->LinkEndChild(new TiXmlText(asString(entity->coords.y)));\n                object_entry->LinkEndChild(subentry_3);\n\n                TiXmlElement* subentry_4 = new TiXmlElement(\"x_velocity\");\n                subentry_4->LinkEndChild(new TiXmlText(asString(entity->getVelocity().x)));\n                object_entry->LinkEndChild(subentry_4);\n\n                TiXmlElement* subentry_5 = new TiXmlElement(\"y_velocity\");\n                subentry_5->LinkEndChild(new TiXmlText(asString(entity->getVelocity().y)));\n                object_entry->LinkEndChild(subentry_5);\n\n                TiXmlElement* subentry_6 = new TiXmlElement(\"rotation\");\n                subentry_6->LinkEndChild(new TiXmlText(asString(entity->sprite.getRotation())));\n                object_entry->LinkEndChild(subentry_6);\n\n                TiXmlElement* subentry_7 = new TiXmlElement(\"rotational_velocity\");\n                subentry_7->LinkEndChild(new TiXmlText(asString(entity->getRotationalVelocity())));\n                object_entry->LinkEndChild(subentry_7);\n\n                TiXmlElement* subentry_8 = new TiXmlElement(\"slaved\");\n                if(entity->slaved){ subentry_8->LinkEndChild(new TiXmlText(\"true\"));}\n                else{ subentry_8->LinkEndChild(new TiXmlText(\"false\"));}\n                object_entry->LinkEndChild(subentry_8);\n\n                TiXmlElement* subentry_9 = new TiXmlElement(\"prop\");\n                if(entity->prop){ subentry_9->LinkEndChild(new TiXmlText(\"true\"));}\n                else{ subentry_9->LinkEndChild(new TiXmlText(\"false\"));}\n                object_entry->LinkEndChild(subentry_9);\n\n\n                for(map<int,string>::iterator slot_parser = entity->contents.begin(); slot_parser != entity->contents.end(); slot_parser++){\n                    if(slot_parser->second!=\"\"){\n                        TiXmlElement* slot_subentry = new TiXmlElement(\"slot\");\n                        slot_subentry->LinkEndChild(new TiXmlText(slot_parser->second));\n                        object_entry->LinkEndChild(slot_subentry);\n                    }\n                }\n            }\n        }\n        for(map<string,shared_ptr<Floor> >::iterator j = sector->floors.begin(); j!= sector->floors.end(); j++)\n        {\n            shared_ptr<Floor> floor = j->second;\n\n            TiXmlElement* object_entry = new TiXmlElement(\"Floor\");\n            object_entry->SetAttribute(\"id\",floor->id);\n            sector_entry->LinkEndChild(object_entry);\n\n            TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n            subentry_1->LinkEndChild(new TiXmlText(floor->properties->name));\n            object_entry->LinkEndChild(subentry_1);\n\n            TiXmlElement* subentry_2 = new TiXmlElement(\"x\");\n            subentry_2->LinkEndChild(new TiXmlText(asString(floor->coords.x)));\n            object_entry->LinkEndChild(subentry_2);\n\n            TiXmlElement* subentry_3 = new TiXmlElement(\"y\");\n            subentry_3->LinkEndChild(new TiXmlText(asString(floor->coords.y)));\n            object_entry->LinkEndChild(subentry_3);\n\n            TiXmlElement* subentry_4 = new TiXmlElement(\"x_velocity\");\n            subentry_4->LinkEndChild(new TiXmlText(asString(floor->getVelocity().x)));\n            object_entry->LinkEndChild(subentry_4);\n\n            TiXmlElement* subentry_5 = new TiXmlElement(\"y_velocity\");\n            subentry_5->LinkEndChild(new TiXmlText(asString(floor->getVelocity().y)));\n            object_entry->LinkEndChild(subentry_5);\n\n            TiXmlElement* subentry_6 = new TiXmlElement(\"rotation\");\n            subentry_6->LinkEndChild(new TiXmlText(asString(floor->sprite.getRotation())));\n            object_entry->LinkEndChild(subentry_6);\n\n            TiXmlElement* subentry_7 = new TiXmlElement(\"rotational_velocity\");\n            subentry_7->LinkEndChild(new TiXmlText(asString(floor->getRotationalVelocity())));\n            object_entry->LinkEndChild(subentry_7);\n\n            TiXmlElement* subentry_8 = new TiXmlElement(\"x_tiles\");\n            subentry_8->LinkEndChild(new TiXmlText(asString(floor->tiles_x)));\n            object_entry->LinkEndChild(subentry_8);\n\n            TiXmlElement* subentry_9 = new TiXmlElement(\"y_tiles\");\n            subentry_9->LinkEndChild(new TiXmlText(asString(floor->tiles_y)));\n            object_entry->LinkEndChild(subentry_9);\n\n            TiXmlElement* subentry_10 = new TiXmlElement(\"prop\");\n            if(floor->prop){ subentry_10->LinkEndChild(new TiXmlText(\"true\"));}\n            else{ subentry_10->LinkEndChild(new TiXmlText(\"false\"));}\n            object_entry->LinkEndChild(subentry_10);\n        }\n        for(map<string,shared_ptr<Poster> >::iterator j = sector->posters.begin(); j!= sector->posters.end(); j++){\n\n            shared_ptr<Poster> poster = j->second;\n\n            TiXmlElement* object_entry = new TiXmlElement(\"Poster\");\n            object_entry->SetAttribute(\"id\",poster->id);\n            sector_entry->LinkEndChild(object_entry);\n\n            TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n            subentry_1->LinkEndChild(new TiXmlText(poster->properties->name));\n            object_entry->LinkEndChild(subentry_1);\n\n            TiXmlElement* subentry_2 = new TiXmlElement(\"relative_x\");\n            subentry_2->LinkEndChild(new TiXmlText(asString(poster->mount_position.x)));\n            object_entry->LinkEndChild(subentry_2);\n\n            TiXmlElement* subentry_3 = new TiXmlElement(\"relative_y\");\n            subentry_3->LinkEndChild(new TiXmlText(asString(poster->mount_position.y)));\n            object_entry->LinkEndChild(subentry_3);\n\n            TiXmlElement* subentry_4 = new TiXmlElement(\"parent_id\");\n            subentry_4->LinkEndChild(new TiXmlText(poster->parent_id));\n            object_entry->LinkEndChild(subentry_4);\n        }\n        for(map<string,shared_ptr<Field> >::iterator j = sector->fields.begin(); j!= sector->fields.end(); j++){\n\n            shared_ptr<Field> field = j->second;\n\n            TiXmlElement* object_entry = new TiXmlElement(\"Field\");\n            object_entry->SetAttribute(\"id\",field->id);\n            sector_entry->LinkEndChild(object_entry);\n\n            TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n            subentry_1->LinkEndChild(new TiXmlText(field->type));\n            object_entry->LinkEndChild(subentry_1);\n\n            TiXmlElement* subentry_2 = new TiXmlElement(\"bounds_type\");\n            if(field->bounds_type == 0){\n                subentry_2->LinkEndChild(new TiXmlText(\"rectangle\"));\n                object_entry->LinkEndChild(subentry_2);\n\n                TiXmlElement* subentry_3 = new TiXmlElement(\"tl_x\");\n                subentry_3->LinkEndChild(new TiXmlText(asString(field->bounds_r.getGlobalBounds().left)));\n                object_entry->LinkEndChild(subentry_3);\n\n                TiXmlElement* subentry_4 = new TiXmlElement(\"tl_y\");\n                subentry_4->LinkEndChild(new TiXmlText(asString(field->bounds_r.getGlobalBounds().top)));\n                object_entry->LinkEndChild(subentry_4);\n\n                TiXmlElement* subentry_5 = new TiXmlElement(\"br_x\");\n                subentry_5->LinkEndChild(new TiXmlText(asString(field->bounds_r.getGlobalBounds().left + field->bounds_r.getGlobalBounds().width)));\n                object_entry->LinkEndChild(subentry_5);\n\n                TiXmlElement* subentry_6 = new TiXmlElement(\"br_y\");\n                subentry_6->LinkEndChild(new TiXmlText(asString(field->bounds_r.getGlobalBounds().top + field->bounds_r.getGlobalBounds().height)));\n                object_entry->LinkEndChild(subentry_6);\n\n                TiXmlElement* subentry_7 = new TiXmlElement(\"r\");\n                subentry_7->LinkEndChild(new TiXmlText(asString(field->bounds_c.getFillColor().r)));\n                object_entry->LinkEndChild(subentry_7);\n\n                TiXmlElement* subentry_8 = new TiXmlElement(\"g\");\n                subentry_8->LinkEndChild(new TiXmlText(asString(field->bounds_c.getFillColor().g)));\n                object_entry->LinkEndChild(subentry_8);\n\n                TiXmlElement* subentry_9 = new TiXmlElement(\"b\");\n                subentry_9->LinkEndChild(new TiXmlText(asString(field->bounds_c.getFillColor().b)));\n                object_entry->LinkEndChild(subentry_9);\n\n                TiXmlElement* subentry_10 = new TiXmlElement(\"a\");\n                subentry_10->LinkEndChild(new TiXmlText(asString(field->bounds_c.getFillColor().a)));\n                object_entry->LinkEndChild(subentry_10);\n            }\n            else if(field->bounds_type == 1){\n                subentry_2->LinkEndChild(new TiXmlText(\"circle\"));\n                object_entry->LinkEndChild(subentry_2);\n\n                TiXmlElement* subentry_3 = new TiXmlElement(\"x\");\n                subentry_3->LinkEndChild(new TiXmlText(asString(field->bounds_c.getPosition().x)));\n                object_entry->LinkEndChild(subentry_3);\n\n                TiXmlElement* subentry_4 = new TiXmlElement(\"y\");\n                subentry_4->LinkEndChild(new TiXmlText(asString(field->bounds_c.getPosition().y)));\n                object_entry->LinkEndChild(subentry_4);\n\n                TiXmlElement* subentry_5 = new TiXmlElement(\"radius\");\n                subentry_5->LinkEndChild(new TiXmlText(asString(field->bounds_c.getRadius())));\n                object_entry->LinkEndChild(subentry_5);\n\n                TiXmlElement* subentry_6 = new TiXmlElement(\"r\");\n                subentry_6->LinkEndChild(new TiXmlText(asString(field->bounds_c.getFillColor().r)));\n                object_entry->LinkEndChild(subentry_6);\n\n                TiXmlElement* subentry_7 = new TiXmlElement(\"g\");\n                subentry_7->LinkEndChild(new TiXmlText(asString(field->bounds_c.getFillColor().g)));\n                object_entry->LinkEndChild(subentry_7);\n\n                TiXmlElement* subentry_8 = new TiXmlElement(\"b\");\n                subentry_8->LinkEndChild(new TiXmlText(asString(field->bounds_c.getFillColor().b)));\n                object_entry->LinkEndChild(subentry_8);\n\n                TiXmlElement* subentry_9 = new TiXmlElement(\"a\");\n                subentry_9->LinkEndChild(new TiXmlText(asString(field->bounds_c.getFillColor().a)));\n                object_entry->LinkEndChild(subentry_9);\n            }\n\n\n            if(field->type==\"gate\"){\n                TiXmlElement* subentry_11 = new TiXmlElement(\"linked_sector\");\n                subentry_11->LinkEndChild(new TiXmlText(field->linked_sector_id));\n                object_entry->LinkEndChild(subentry_11);\n\n                TiXmlElement* subentry_12 = new TiXmlElement(\"linked_x\");\n                subentry_12->LinkEndChild(new TiXmlText(asString(field->linked_sector_spawn.x)));\n                object_entry->LinkEndChild(subentry_12);\n\n                TiXmlElement* subentry_13 = new TiXmlElement(\"linked_y\");\n                subentry_13->LinkEndChild(new TiXmlText(asString(field->linked_sector_spawn.y)));\n                object_entry->LinkEndChild(subentry_13);\n            }\n\n\n        }\n        for(map<string,shared_ptr<Interface> >::iterator j = sector->interfaces.begin(); j!= sector->interfaces.end(); j++){\n\n            shared_ptr<Interface> this_interface = j->second;\n            if(this_interface->properties->classification==\"INTERFACE\"){\n\n                TiXmlElement* object_entry = new TiXmlElement(\"Interface\");\n                object_entry->SetAttribute(\"id\",this_interface->id);\n                sector_entry->LinkEndChild(object_entry);\n\n                TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n                subentry_1->LinkEndChild(new TiXmlText(this_interface->properties->name));\n                object_entry->LinkEndChild(subentry_1);\n\n                TiXmlElement* subentry_2 = new TiXmlElement(\"machine_id\");\n                subentry_2->LinkEndChild(new TiXmlText(this_interface->machine_id));\n                object_entry->LinkEndChild(subentry_2);\n\n                TiXmlElement* subentry_3 = new TiXmlElement(\"port_id\");\n                subentry_3->LinkEndChild(new TiXmlText(this_interface->port_id));\n                object_entry->LinkEndChild(subentry_3);\n\n                TiXmlElement* subentry_4 = new TiXmlElement(\"relative_x\");\n                subentry_4->LinkEndChild(new TiXmlText(asString(this_interface->relative_position[0].x)));\n                object_entry->LinkEndChild(subentry_4);\n\n                TiXmlElement* subentry_5 = new TiXmlElement(\"relative_y\");\n                subentry_5->LinkEndChild(new TiXmlText(asString(this_interface->relative_position[0].y)));\n                object_entry->LinkEndChild(subentry_5);\n\n                for(map<string, double>::iterator var_parser = this_interface->var_num.begin(); var_parser != this_interface->var_num.end(); var_parser++){\n                    TiXmlElement* var_subentry = new TiXmlElement(\"var_num\");\n                    var_subentry->SetAttribute(\"id\",var_parser->first);\n                    var_subentry->LinkEndChild(new TiXmlText(asString(var_parser->second)));\n                    object_entry->LinkEndChild(var_subentry);\n                }\n            }\n            else{\n                TiXmlElement* object_entry = new TiXmlElement(\"Transfer\");\n                object_entry->SetAttribute(\"id\",this_interface->id);\n                sector_entry->LinkEndChild(object_entry);\n\n                TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n                subentry_1->LinkEndChild(new TiXmlText(this_interface->properties->name));\n                object_entry->LinkEndChild(subentry_1);\n\n                TiXmlElement* subentry_2 = new TiXmlElement(\"machine_id_a\");\n                subentry_2->LinkEndChild(new TiXmlText(this_interface->machine_id));\n                object_entry->LinkEndChild(subentry_2);\n\n                TiXmlElement* subentry_3 = new TiXmlElement(\"port_id_a\");\n                subentry_3->LinkEndChild(new TiXmlText(this_interface->port_id));\n                object_entry->LinkEndChild(subentry_3);\n\n                TiXmlElement* subentry_4 = new TiXmlElement(\"machine_id_b\");\n                subentry_4->LinkEndChild(new TiXmlText(this_interface->machine_id_2));\n                object_entry->LinkEndChild(subentry_4);\n\n                TiXmlElement* subentry_5 = new TiXmlElement(\"port_id_b\");\n                subentry_5->LinkEndChild(new TiXmlText(this_interface->port_id_2));\n                object_entry->LinkEndChild(subentry_5);\n\n                for(map<string, double>::iterator var_parser = this_interface->var_num.begin(); var_parser != this_interface->var_num.end(); var_parser++){\n                    TiXmlElement* var_subentry = new TiXmlElement(\"var_num\");\n                    var_subentry->SetAttribute(\"id\",var_parser->first);\n                    var_subentry->LinkEndChild(new TiXmlText(asString(var_parser->second)));\n                    object_entry->LinkEndChild(var_subentry);\n                }\n            }\n        }\n        for(map<string,shared_ptr<Item> >::iterator j = sector->items.begin(); j!= sector->items.end(); j++)\n        {\n            shared_ptr<Item> item = j->second;\n\n            if(j->second->properties->classification!=\"CHIP\"){\n                TiXmlElement* object_entry = new TiXmlElement(\"Item\");\n                object_entry->SetAttribute(\"id\",item->id);\n                sector_entry->LinkEndChild(object_entry);\n\n                TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n                subentry_1->LinkEndChild(new TiXmlText(item->properties->name));\n                object_entry->LinkEndChild(subentry_1);\n\n               // TiXmlElement* subentry_2 = new TiXmlElement(\"storage_id\");\n              //  subentry_2->LinkEndChild(new TiXmlText(item->storage_id));\n               // object_entry->LinkEndChild(subentry_2);\n            }\n            else{\n\n                shared_ptr<Chip> chip = getSector(sector->id)->chips[item->id].lock();\n\n                TiXmlElement* object_entry = new TiXmlElement(\"Chip\");\n                object_entry->SetAttribute(\"id\",chip->id);\n                sector_entry->LinkEndChild(object_entry);\n\n                TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n                subentry_1->LinkEndChild(new TiXmlText(chip->properties->name));\n                object_entry->LinkEndChild(subentry_1);\n\n              //  TiXmlElement* subentry_2 = new TiXmlElement(\"storage_id\");\n              //  subentry_2->LinkEndChild(new TiXmlText(chip->storage_id));\n               // object_entry->LinkEndChild(subentry_2);\n\n                for(map<int, double>::iterator var_parser = chip->var_num.begin(); var_parser != chip->var_num.end(); var_parser++){\n                    TiXmlElement* var_subentry = new TiXmlElement(\"var_num\");\n                    var_subentry->SetAttribute(\"id\",asString(var_parser->first));\n                    var_subentry->LinkEndChild(new TiXmlText(asString(var_parser->second)));\n                    object_entry->LinkEndChild(var_subentry);\n                }\n                for(map<int, string>::iterator var_parser = chip->var_str.begin(); var_parser != chip->var_str.end(); var_parser++){\n                    TiXmlElement* var_subentry = new TiXmlElement(\"var_str\");\n                    var_subentry->SetAttribute(\"id\",asString(var_parser->first));\n                    var_subentry->LinkEndChild(new TiXmlText(var_parser->second));\n                    object_entry->LinkEndChild(var_subentry);\n                }\n            }\n\n        }\n        for(map<string,shared_ptr<Connector> >::iterator j = sector->connectors.begin(); j!= sector->connectors.end(); j++)\n        {\n            shared_ptr<Connector> connector = j->second;\n\n            TiXmlElement* object_entry = new TiXmlElement(\"Connector\");\n            object_entry->SetAttribute(\"id\",connector->id);\n            sector_entry->LinkEndChild(object_entry);\n\n            TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n            subentry_1->LinkEndChild(new TiXmlText(connector->type));\n            object_entry->LinkEndChild(subentry_1);\n\n            TiXmlElement* subentry_2 = new TiXmlElement(\"A\");\n            subentry_2->LinkEndChild(new TiXmlText(connector->a_id));\n            object_entry->LinkEndChild(subentry_2);\n\n            TiXmlElement* subentry_3 = new TiXmlElement(\"B\");\n            subentry_3->LinkEndChild(new TiXmlText(connector->b_id));\n            object_entry->LinkEndChild(subentry_3);\n\n            if(connector->has_sprite){\n                TiXmlElement* subentry_4 = new TiXmlElement(\"relative_x\");\n                subentry_4->LinkEndChild(new TiXmlText(asString(connector->relative_position.x)));\n                object_entry->LinkEndChild(subentry_4);\n\n                TiXmlElement* subentry_5 = new TiXmlElement(\"relative_y\");\n                subentry_5->LinkEndChild(new TiXmlText(asString(connector->relative_position.y)));\n                object_entry->LinkEndChild(subentry_5);\n\n                TiXmlElement* subentry_6 = new TiXmlElement(\"relative_r\");\n                subentry_6->LinkEndChild(new TiXmlText(asString(connector->relative_rotation)));\n                object_entry->LinkEndChild(subentry_6);\n            }\n            \n        }\n        for(map<string,shared_ptr<Rope> >::iterator j = sector->ropes.begin(); j!= sector->ropes.end(); j++){\n\n            shared_ptr<Rope> rope = j->second;\n\n            TiXmlElement* object_entry = new TiXmlElement(\"Rope\");\n            object_entry->SetAttribute(\"id\",rope->id);\n            sector_entry->LinkEndChild(object_entry);\n\n            TiXmlElement* subentry_1 = new TiXmlElement(\"type\");\n            subentry_1->LinkEndChild(new TiXmlText(rope->properties->name));\n            object_entry->LinkEndChild(subentry_1);\n\n            for(vector<shared_ptr<RopeNode> >::iterator node_parser = rope->nodes.begin(); node_parser != rope->nodes.end(); node_parser++){\n\n                shared_ptr<RopeNode> node = *node_parser;\n                TiXmlElement* node_entry = new TiXmlElement(\"node\");\n                object_entry->LinkEndChild(node_entry);\n\n                TiXmlElement* node_subentry_1 = new TiXmlElement(\"x\");\n                node_subentry_1->LinkEndChild(new TiXmlText(asString(node->coords.x)));\n                node_entry->LinkEndChild(node_subentry_1);\n\n                TiXmlElement* node_subentry_2 = new TiXmlElement(\"y\");\n                node_subentry_2->LinkEndChild(new TiXmlText(asString(node->coords.y)));\n                node_entry->LinkEndChild(node_subentry_2);\n\n                TiXmlElement* node_subentry_3 = new TiXmlElement(\"x_velocity\");\n                node_subentry_3->LinkEndChild(new TiXmlText(asString(node->getVelocity().x)));\n                node_entry->LinkEndChild(node_subentry_3);\n\n                TiXmlElement* node_subentry_4 = new TiXmlElement(\"y_velocity\");\n                node_subentry_4->LinkEndChild(new TiXmlText(asString(node->getVelocity().y)));\n                node_entry->LinkEndChild(node_subentry_4);\n\n                TiXmlElement* node_subentry_5 = new TiXmlElement(\"attached\");\n                node_subentry_5->LinkEndChild(new TiXmlText(node->attached_id));\n                node_entry->LinkEndChild(node_subentry_5);\n\n                TiXmlElement* node_subentry_6 = new TiXmlElement(\"attachment_x\");\n                node_subentry_6->LinkEndChild(new TiXmlText(asString(node->attachment_coords.x)));\n                node_entry->LinkEndChild(node_subentry_6);\n\n                TiXmlElement* node_subentry_7 = new TiXmlElement(\"attachment_y\");\n                node_subentry_7->LinkEndChild(new TiXmlText(asString(node->attachment_coords.y)));\n                node_entry->LinkEndChild(node_subentry_7);\n            }\n        }\n\n        sector_doc.SaveFile(\"saves/\" + worldsavename + \"/\" + i->first + \".xml\");\n    }\n\n    return true;\n}\n\nbool World::loadWorldFromFile(string worldsavename)\n{\n    TiXmlDocument doc(\"saves/\"+worldsavename+\"/index.xml\");\n    bool doc_valid = doc.LoadFile();\n    if(not doc_valid){return false;}\n\n    TiXmlElement* world_element = doc.FirstChildElement();\n    string test_string = world_element->ValueStr();\n    if(test_string!=\"World\"){return false;}\n\n    id = world_element->Attribute(\"id\");\n\n    for(TiXmlElement* index_element = world_element->FirstChildElement(); index_element != NULL; index_element = index_element->NextSiblingElement())\n    {\n        TiXmlDocument sector_doc(index_element->Attribute(\"path\"));\n        doc_valid = sector_doc.LoadFile();\n        if(not doc_valid){return false;}\n\n        TiXmlElement* sector_element = sector_doc.FirstChildElement();\n        test_string = sector_element->ValueStr();\n        if(test_string!=\"Sector\"){return false;}\n        string current_sector_id = sector_element->Attribute(\"id\");\n\n        bool planetside = false;\n        if(string(sector_element->Attribute(\"planetside\")) == \"true\"){ planetside = true; }\n        sectors[current_sector_id] = make_shared<Sector>(current_sector_id, strtod(sector_element->Attribute(\"radius\"),NULL), sector_element->Attribute(\"tile\"), strtod(sector_element->Attribute(\"ambient\"),NULL), planetside);\n\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Entity\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Entity\"))\n        {\n            if(string(object_element->FirstChildElement(\"prop\")->GetText())==\"true\"){\n                makeNewProp(current_sector_id, object_element->Attribute(\"id\"), strtod(object_element->FirstChildElement(\"x\")->GetText(),NULL), strtod(object_element->FirstChildElement(\"y\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"rotation\")->GetText(),NULL),object_element->FirstChildElement(\"type\")->GetText());\n            }\n            else{\n                makeNewEntity(current_sector_id, object_element->Attribute(\"id\"), strtod(object_element->FirstChildElement(\"x\")->GetText(),NULL), strtod(object_element->FirstChildElement(\"y\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"rotation\")->GetText(),NULL),object_element->FirstChildElement(\"type\")->GetText());\n                getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->setRotationalVelocity(strtod(object_element->FirstChildElement(\"rotational_velocity\")->GetText(),NULL));\n                getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->setVelocity(strtod(object_element->FirstChildElement(\"x_velocity\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"y_velocity\")->GetText(),NULL));\n                if(string(object_element->FirstChildElement(\"slaved\")->GetText()) == \"true\"){\n                    getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->slaved = true;\n                }\n                int i = 1;\n                for(TiXmlElement* sub_element = object_element->FirstChildElement(\"slot\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"slot\")){\n                    getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->contents[i] = sub_element->GetText();\n                    i++;\n                }\n            }\n\n        }\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Player\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Player\"))\n        {\n            makeNewPlayer(current_sector_id, object_element->Attribute(\"id\"), strtod(object_element->FirstChildElement(\"x\")->GetText(),NULL), strtod(object_element->FirstChildElement(\"y\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"rotation\")->GetText(),NULL),object_element->FirstChildElement(\"type\")->GetText());\n            getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->setRotationalVelocity(strtod(object_element->FirstChildElement(\"rotational_velocity\")->GetText(),NULL));\n            getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->setVelocity(strtod(object_element->FirstChildElement(\"x_velocity\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"y_velocity\")->GetText(),NULL));\n            if(string(object_element->FirstChildElement(\"slaved\")->GetText()) == \"true\"){\n                getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->slaved = true;\n            }\n            int i = 1;\n            for(TiXmlElement* sub_element = object_element->FirstChildElement(\"slot\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"slot\")){\n                getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->contents[i] = sub_element->GetText();\n                i++;\n            }\n        }\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Machine\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Machine\"))\n        {\n            makeNewMachine(current_sector_id, object_element->Attribute(\"id\"), strtod(object_element->FirstChildElement(\"x\")->GetText(),NULL), strtod(object_element->FirstChildElement(\"y\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"rotation\")->GetText(),NULL),object_element->FirstChildElement(\"type\")->GetText(), true);\n            getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->setRotationalVelocity(strtod(object_element->FirstChildElement(\"rotational_velocity\")->GetText(),NULL));\n            getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->setVelocity(strtod(object_element->FirstChildElement(\"x_velocity\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"y_velocity\")->GetText(),NULL));\n            if(string(object_element->FirstChildElement(\"slaved\")->GetText()) == \"true\"){\n                getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->slaved = true;\n            }\n            int i = 1;\n            for(TiXmlElement* sub_element = object_element->FirstChildElement(\"slot\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"slot\")){\n                getSector(current_sector_id)->ents[object_element->Attribute(\"id\")]->contents[i] = sub_element->GetText();\n                i++;\n            }\n            for(TiXmlElement* sub_element = object_element->FirstChildElement(\"cell_var\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"cell_var\"))\n            {\n                getSector(current_sector_id)->getMachine(object_element->Attribute(\"id\"))->internal_cells[sub_element->Attribute(\"cell_id\")]->vars[sub_element->Attribute(\"var_id\")] = strtod(sub_element->GetText(),NULL);\n            }\n            for(TiXmlElement* sub_element = object_element->FirstChildElement(\"cell_data\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"cell_data\"))\n            {\n                if(sub_element->GetText() == NULL){\n                    getSector(current_sector_id)->getMachine(object_element->Attribute(\"id\"))->internal_cells[sub_element->Attribute(\"cell_id\")]->data[sub_element->Attribute(\"data_id\")] = \"\";\n                }\n                else{\n                    getSector(current_sector_id)->getMachine(object_element->Attribute(\"id\"))->internal_cells[sub_element->Attribute(\"cell_id\")]->data[sub_element->Attribute(\"data_id\")] = sub_element->GetText();\n                }\n            }\n            for(TiXmlElement* sub_element = object_element->FirstChildElement(\"port_connection\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"port_connection\"))\n            {\n                getSector(current_sector_id)->getMachine(object_element->Attribute(\"id\"))->ports[sub_element->Attribute(\"port_id\")]->connection = sub_element->GetText();\n            }\n\n        }\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Poster\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Poster\"))\n        {\n            makeNewPoster(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"type\")->GetText(), object_element->FirstChildElement(\"parent_id\")->GetText(), Vector2f(strtod(object_element->FirstChildElement(\"relative_x\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"relative_y\")->GetText(),NULL)));\n        }\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Field\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Field\")){\n\n            string type = object_element->FirstChildElement(\"type\")->GetText();\n            if(type == \"gate\"){\n                string bounds_type = object_element->FirstChildElement(\"bounds_type\")->GetText();\n                if(bounds_type == \"rectangle\"){//rectangle\n                    getSector(current_sector_id)->fields[object_element->Attribute(\"id\")] = make_shared<GateField>(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"linked_sector\")->GetText(), Vector2f(strtod(object_element->FirstChildElement(\"linked_x\")->GetText(), NULL),strtod(object_element->FirstChildElement(\"linked_y\")->GetText(), NULL)), Vector2f(strtod(object_element->FirstChildElement(\"tl_x\")->GetText(), NULL),strtod(object_element->FirstChildElement(\"tl_y\")->GetText(), NULL)),Vector2f(strtod(object_element->FirstChildElement(\"br_x\")->GetText(), NULL),strtod(object_element->FirstChildElement(\"br_y\")->GetText(), NULL)),Color(strtod(object_element->FirstChildElement(\"r\")->GetText(), NULL),strtod(object_element->FirstChildElement(\"g\")->GetText(), NULL),strtod(object_element->FirstChildElement(\"b\")->GetText(), NULL),strtod(object_element->FirstChildElement(\"a\")->GetText(), NULL)));\n                }\n                else if(bounds_type == \"circle\"){ //circle\n                    getSector(current_sector_id)->fields[object_element->Attribute(\"id\")] = make_shared<GateField>(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"linked_sector\")->GetText(), Vector2f(strtod(object_element->FirstChildElement(\"linked_x\")->GetText(), NULL),strtod(object_element->FirstChildElement(\"linked_y\")->GetText(), NULL)), Vector2f(strtod(object_element->FirstChildElement(\"x\")->GetText(), NULL),strtod(object_element->FirstChildElement(\"y\")->GetText(), NULL)),strtod(object_element->FirstChildElement(\"radius\")->GetText(),NULL),Color(strtod(object_element->FirstChildElement(\"r\")->GetText(), NULL),strtod(object_element->FirstChildElement(\"g\")->GetText(), NULL),strtod(object_element->FirstChildElement(\"b\")->GetText(), NULL),strtod(object_element->FirstChildElement(\"a\")->GetText(), NULL)));\n                }\n\n            }\n        }\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Interface\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Interface\"))\n        {\n            makeNewInterface(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"port_id\")->GetText(), object_element->FirstChildElement(\"machine_id\")->GetText(), Vector2f(strtod(object_element->FirstChildElement(\"relative_x\")->GetText(),NULL), strtod(object_element->FirstChildElement(\"relative_y\")->GetText(),NULL)),object_element->FirstChildElement(\"type\")->GetText());\n            for(TiXmlElement* sub_element = object_element->FirstChildElement(\"var_num\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"var_num\"))\n            {\n                getSector(current_sector_id)->interfaces[object_element->Attribute(\"id\")]->var_num[sub_element->Attribute(\"id\")] = strtod(sub_element->GetText(),NULL);\n            }\n        }\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Transfer\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Transfer\"))\n        {\n            makeNewTransfer(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"port_id_a\")->GetText(), object_element->FirstChildElement(\"port_id_b\")->GetText(), object_element->FirstChildElement(\"machine_id_a\")->GetText(), object_element->FirstChildElement(\"machine_id_b\")->GetText(),object_element->FirstChildElement(\"type\")->GetText());\n            for(TiXmlElement* sub_element = object_element->FirstChildElement(\"var_num\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"var_num\"))\n            {\n                getSector(current_sector_id)->interfaces[object_element->Attribute(\"id\")]->var_num[sub_element->Attribute(\"id\")] = strtod(sub_element->GetText(),NULL);\n            }\n        }\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Floor\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Floor\"))\n        {\n            if(string(object_element->FirstChildElement(\"prop\")->GetText())==\"true\"){\n                makeNewFloorProp(current_sector_id, object_element->Attribute(\"id\"), strtod(object_element->FirstChildElement(\"x\")->GetText(),NULL), strtod(object_element->FirstChildElement(\"y\")->GetText(),NULL), strtod(object_element->FirstChildElement(\"x_tiles\")->GetText(),NULL), strtod(object_element->FirstChildElement(\"y_tiles\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"rotation\")->GetText(),NULL),object_element->FirstChildElement(\"type\")->GetText());\n            }\n            else{\n                makeNewFloor(current_sector_id, object_element->Attribute(\"id\"), strtod(object_element->FirstChildElement(\"x\")->GetText(),NULL), strtod(object_element->FirstChildElement(\"y\")->GetText(),NULL), strtod(object_element->FirstChildElement(\"x_tiles\")->GetText(),NULL), strtod(object_element->FirstChildElement(\"y_tiles\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"rotation\")->GetText(),NULL),object_element->FirstChildElement(\"type\")->GetText());\n                getSector(current_sector_id)->floors[object_element->Attribute(\"id\")]->setRotationalVelocity(strtod(object_element->FirstChildElement(\"rotational_velocity\")->GetText(),NULL));\n                getSector(current_sector_id)->floors[object_element->Attribute(\"id\")]->setVelocity(strtod(object_element->FirstChildElement(\"x_velocity\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"y_velocity\")->GetText(),NULL));\n            }\n        }\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Connector\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Connector\"))\n        {\n            makeNewConnector(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"type\")->GetText(), object_element->FirstChildElement(\"A\")->GetText(), object_element->FirstChildElement(\"B\")->GetText());\n            getSector(current_sector_id)->getEnt(object_element->FirstChildElement(\"A\")->GetText())->connectors.insert(object_element->Attribute(\"id\"));\n            getSector(current_sector_id)->getEnt(object_element->FirstChildElement(\"B\")->GetText())->connectors.insert(object_element->Attribute(\"id\"));\n        \n            if(object_element->FirstChildElement(\"relative_x\") != NULL){\n\n                Sprite build_sprite;\n                build_sprite.setTexture(getProperties(object_element->FirstChildElement(\"type\")->GetText())->sheet, true);\n                IntRect build_rect = build_sprite.getTextureRect();\n                build_sprite.setOrigin(build_rect.width/2.0,build_rect.height/2.0);\n                getSector(current_sector_id)->connectors[object_element->Attribute(\"id\")]->setSprite(build_sprite);\n                getSector(current_sector_id)->connectors[object_element->Attribute(\"id\")]->relative_position = Vector2f(strtod(object_element->FirstChildElement(\"relative_x\")->GetText(),NULL),strtod(object_element->FirstChildElement(\"relative_y\")->GetText(),NULL));\n                getSector(current_sector_id)->connectors[object_element->Attribute(\"id\")]->relative_rotation = strtod(object_element->FirstChildElement(\"relative_r\")->GetText(),NULL);\n            }\n        }\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Item\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Item\"))\n        {\n            registerNewItem(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"type\")->GetText());\n            //getSector(current_sector_id)->items[object_element->Attribute(\"id\")]->storage_id = object_element->FirstChildElement(\"storage_id\")->GetText();\n        }\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Chip\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Chip\"))\n        {\n            registerNewItem(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"type\")->GetText());\n            //getSector(current_sector_id)->items[object_element->Attribute(\"id\")]->storage_id = object_element->FirstChildElement(\"storage_id\")->GetText();\n            for(TiXmlElement* sub_element = object_element->FirstChildElement(\"var_num\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"var_num\"))\n            {\n                getSector(current_sector_id)->chips[object_element->Attribute(\"id\")].lock()->var_num[int(strtod(sub_element->Attribute(\"id\"),NULL))] = strtod(sub_element->GetText(),NULL);\n            }\n            for(TiXmlElement* sub_element = object_element->FirstChildElement(\"var_str\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"var_str\"))\n            {\n                getSector(current_sector_id)->chips[object_element->Attribute(\"id\")].lock()->var_str[int(strtod(sub_element->Attribute(\"id\"),NULL))] = sub_element->GetText();\n            }\n        }\n        for(TiXmlElement* object_element = sector_element->FirstChildElement(\"Rope\"); object_element!= NULL; object_element = object_element->NextSiblingElement(\"Rope\"))\n        {\n            getSector(current_sector_id)->ropes[object_element->Attribute(\"id\")] = make_shared<Rope>(current_sector_id, object_element->Attribute(\"id\"), object_element->FirstChildElement(\"type\")->GetText());\n            for(TiXmlElement* sub_element = object_element->FirstChildElement(\"node\"); sub_element!= NULL; sub_element = sub_element->NextSiblingElement(\"node\")){\n                string attached_id;\n                if(sub_element->FirstChildElement(\"attached\")->GetText()==NULL){\n                    attached_id = \"\";\n                }\n                else{\n                    attached_id = sub_element->FirstChildElement(\"attached\")->GetText();\n                }\n                getSector(current_sector_id)->ropes[object_element->Attribute(\"id\")]->addExplicitNode(Vector2f(strtod(sub_element->FirstChildElement(\"x\")->GetText(),NULL),strtod(sub_element->FirstChildElement(\"y\")->GetText(),NULL)),Vector2f(strtod(sub_element->FirstChildElement(\"x_velocity\")->GetText(),NULL),strtod(sub_element->FirstChildElement(\"y_velocity\")->GetText(),NULL)),attached_id, Vector2f(strtod(sub_element->FirstChildElement(\"attachment_x\")->GetText(),NULL),strtod(sub_element->FirstChildElement(\"attachment_y\")->GetText(),NULL)));\n\n            }\n        }\n    }\n    for(map<string,shared_ptr<Sector> >::iterator parser = sectors.begin(); parser!=sectors.end(); parser++){\n        parser->second->resortAllObjectsIntoBonds();\n    }\n\n    TiXmlDocument changes_doc(\"changes/index.xml\");\n    changes_doc.LoadFile();\n\n    for(TiXmlElement* changes_element = changes_doc.FirstChildElement(); changes_element != NULL; changes_element = changes_element->NextSiblingElement())\n    {\n        string change_id = changes_element->Attribute(\"id\");\n        double year = strtod(changes_element->FirstChildElement(\"year\")->GetText(), NULL);\n        double month = strtod(changes_element->FirstChildElement(\"month\")->GetText(), NULL);\n        double day = strtod(changes_element->FirstChildElement(\"day\")->GetText(), NULL);\n        double hour = strtod(changes_element->FirstChildElement(\"hour\")->GetText(), NULL);\n        double minute = strtod(changes_element->FirstChildElement(\"minute\")->GetText(), NULL);\n        double second = strtod(changes_element->FirstChildElement(\"second\")->GetText(), NULL);\n\n        if(changes_element->FirstChildElement(\"relative_year\") != NULL){\n            double relative_year = strtod(changes_element->FirstChildElement(\"relative_year\")->GetText(), NULL);\n            double relative_month = strtod(changes_element->FirstChildElement(\"relative_month\")->GetText(), NULL);\n            double relative_day = strtod(changes_element->FirstChildElement(\"relative_day\")->GetText(), NULL);\n            double relative_hour = strtod(changes_element->FirstChildElement(\"relative_hour\")->GetText(), NULL);\n            double relative_minute = strtod(changes_element->FirstChildElement(\"relative_minute\")->GetText(), NULL);\n            double relative_second = strtod(changes_element->FirstChildElement(\"relative_second\")->GetText(), NULL);\n            changes[change_id] = make_shared<Change>(change_id, Date(month,day,year,hour,minute,second), Date(relative_month,relative_day,relative_year,relative_hour,relative_minute,relative_second));\n        }\n        else{\n            changes[change_id] = make_shared<Change>(change_id, Date(month,day,year,hour,minute,second));\n        }\n\n        for(TiXmlElement* prereq_element = changes_element->FirstChildElement(\"prereq\"); prereq_element != NULL; prereq_element = prereq_element->NextSiblingElement(\"prereq\")){\n            changes[change_id]->prereq_events[prereq_element->GetText()] = false;\n        }\n    }\n\n    return true;\n}\n\n//\n//void sendEntireWorld(TcpSocket &socket){\n//\n//    for(map<string, shared_ptr<Sector> >::iterator parser = world.sectors.begin(); parser != world.sectors.end(); parser++){\n//        shared_ptr<Sector> sector = parser->second;\n//\n//        Packet sector_header;\n//        sector_header << \"SECTOR\" << sector->id << sector->radius << sector->backdrop_tx_path;\n//        socket.send(sector_header);\n//\n//        for(map<string, shared_ptr<Floor> >::iterator i = sector->floors.begin(); i != sector->floors.end(); i++) //run per-loop operations on floor\n//        {\n//            Packet packet;\n//            packet << i->second->properties->name << i->second->id << double(i->second->coords.x) << double(i->second->coords.y);\n//            socket.send(packet);\n//        }\n//        for(map<string, shared_ptr<Entity> >::iterator i = sector->ents.begin(); i != sector->ents.end(); i++) //run per-loop operations on object\n//        {\n//            Packet packet;\n//            packet << i->second->properties->name << i->second->id << double(i->second->coords.x) << double(i->second->coords.y);\n//            socket.send(packet);\n//        }\n//    }\n//}\n//\n//void receiveEntireWorld(TcpSocket &socket){\n//\n//    world = World();\n//\n//    string sector_id;\n//\n//\n//    socket.setBlocking(false);\n//    Clock timeout_timer;\n//\n//    while(true){\n//\n//        Packet packet;\n//\n//        double timeout = 0;\n//        timeout_timer.restart();\n//        while(timeout < 1){\n//            if(socket.receive(packet) == TcpSocket::Done){\n//                break;\n//            }\n//            timeout += timeout_timer.getElapsedTime().asSeconds();\n//            timeout_timer.restart();\n//        }\n//        if(timeout >= 1){\n//            break;\n//        }\n//\n//        string type;\n//        packet >> type;\n//\n//        if(type == \"SECTOR\"){\n//\n//            double radius;\n//            string texture;\n//            packet >> sector_id >> radius >> texture;\n//            world.loadSector(sector_id, radius, texture);\n//        }\n//        else{\n//\n//            string classification = getProperties(type)->classification;\n//\n//\n//            if(classification == \"ENTITY\"){\n//\n//                string id;\n//                double x;\n//                double y;\n//                packet >> id >> x >> y;\n//\n//                world.loadEntity(sector_id, id, Vector2f(x, y), type, 0, Vector2f(0,0), 0);\n//            }\n//            if(classification == \"FLOOR\"){\n//\n//                string id;\n//                double x;\n//                double y;\n//                packet >> id >> x >> y;\n//\n//              //  world.loadFloor(sector_id, id, Vector2f(x, y), type, 0, Vector2f(10,0), 0);\n//\n//            }\n//            if(classification == \"MACHINE\"){\n//\n//            }\n//            if(classification == \"CONTAINER\"){\n//\n//            }\n//            if(classification == \"INTERFACE\"){\n//\n//            }\n//            if(classification == \"TRANSFER\"){\n//\n//            }\n//            if(classification == \"ITEM\"){\n//\n//            }\n//            if(classification == \"SCRAP\"){\n//\n//            }\n//            if(classification == \"ROPE\"){\n//\n//            }\n//        }\n//    }\n//}\n//\n//\n//Map::Map()\n//{\n//    backdrop.setTexture(*tx_groups[\"map\"].getTexture(),true);\n//    backdrop.setOrigin(tx_groups[\"map\"].getRect()->width/2,tx_groups[\"map\"].getRect()->height/2);\n//    backdrop.setPosition(map_center.x,map_center.y);\n//\n//    map_window = FloatRect(0,0,600,600);\n//    map_window.top = map_center.x - map_window.width/2;\n//    map_window.left = map_center.y - map_window.height/2;\n//\n//    for(map<string,shared_ptr<Sector> >::iterator parser = world.sectors.begin(); parser!=world.sectors.end(); parser++)\n//    {\n//        shared_ptr<Sector> sector = parser->second;\n//        Sprite new_sprite;\n//        new_sprite.setTexture(*tx_groups[\"sector\"].getTexture(),true);\n//        new_sprite.setOrigin(tx_groups[\"sector\"].getRect()->width/2,tx_groups[\"sector\"].getRect()->height/2);\n//        new_sprite.setPosition(map_center.x + sector->universe_coords.x*getScale(),map_center.y + sector->universe_coords.y*getScale());\n//        sector_sprites[parser->first] = new_sprite;\n//\n//        CircleShape new_circle;\n//        new_circle.setRadius(sector->radius*getScale());\n//        new_circle.setOrigin(sector->radius*getScale(),sector->radius*getScale());\n//        new_circle.setFillColor(Color(0,0,0,0));\n//        new_circle.setOutlineColor(Color(0,255,0,155));\n//        new_circle.setOutlineThickness(2);\n//        new_circle.setPosition(map_center.x + sector->universe_coords.x*getScale(),map_center.y + sector->universe_coords.y*getScale());\n//        sector_circles[parser->first] = new_circle;\n//    }\n//}\n//\n//void Map::toggle()\n//{\n//    enabled = not enabled;\n//}\n//\n//double Map::getScale()\n//{\n//    return scale/1000;\n//}\n//\n//void Map::update()\n//{\n//    if(not enabled){return;}\n//\n//    map_center.x = window.getSize().x/2;\n//    map_center.y = window.getSize().y/2;\n//\n//    backdrop.setPosition(map_center.x,map_center.y);\n//    map_window.left = map_center.x - (map_window.width/2);\n//    map_window.top = map_center.y - (map_window.height/2);\n//\n//    for(map<string,shared_ptr<Sector> >::iterator parser = world.sectors.begin(); parser!=world.sectors.end(); parser++)\n//    {\n//        shared_ptr<Sector> sector = parser->second;\n//        if(sector_sprites.count(parser->first)==0)\n//        {\n//            Sprite new_sprite;\n//            new_sprite.setTexture(*tx_groups[\"sector\"].getTexture(),true);\n//            new_sprite.setOrigin(tx_groups[\"sector\"].getRect()->width/2,tx_groups[\"sector\"].getRect()->height/2);\n//            new_sprite.setPosition(map_center.x + sector->universe_coords.x*getScale(),map_center.y + sector->universe_coords.y*getScale());\n//            sector_sprites[parser->first] = new_sprite;\n//\n//            CircleShape new_circle;\n//            new_circle.setRadius(sector->radius*getScale());\n//            new_circle.setOrigin(sector->radius*getScale(),sector->radius*getScale());\n//            new_circle.setFillColor(Color(0,0,0,0));\n//            new_circle.setOutlineColor(Color(0,255,0,155));\n//            new_circle.setOutlineThickness(2);\n//            new_circle.setPosition(map_center.x + sector->universe_coords.x*getScale(),map_center.y + sector->universe_coords.y*getScale());\n//            sector_circles[parser->first] = new_circle;\n//        }\n//        else\n//        {\n//            sector_sprites[parser->first].setPosition(map_center.x + sector->universe_coords.x*getScale(),map_center.y + sector->universe_coords.y*getScale());\n//            sector_circles[parser->first].setRadius(sector->radius*getScale());\n//            sector_circles[parser->first].setOrigin(sector->radius*getScale(),sector->radius*getScale());\n//            sector_circles[parser->first].setPosition(map_center.x + sector->universe_coords.x*getScale(),map_center.y + sector->universe_coords.y*getScale());\n//        }\n//    }\n//\n//    set<string> to_delete;\n//    for(map<string,Sprite>::iterator parser = sector_sprites.begin(); parser!=sector_sprites.end(); parser++)\n//    {\n//        if(world.sectors.count(parser->first)==0)\n//        {\n//            to_delete.insert(parser->first);\n//        }\n//    }\n//    for(set<string>::iterator parser = to_delete.begin(); parser != to_delete.end(); parser++)\n//    {\n//        sector_sprites.erase(*parser);\n//        sector_circles.erase(*parser);\n//    }\n//}\n//\n//void Map::draw()\n//{\n//    if(not enabled){return;}\n//\n//    window.draw(backdrop);\n//    for(map<string,Sprite>::iterator parser = sector_sprites.begin(); parser!=sector_sprites.end(); parser++)\n//    {\n//        Sprite sprite = parser->second;\n//        if(sprite.getGlobalBounds().intersects(map_window))\n//        {\n//            window.draw(sprite);\n//        }\n//    }\n//    for(map<string,CircleShape>::iterator parser = sector_circles.begin(); parser!=sector_circles.end(); parser++)\n//    {\n//        CircleShape sprite = parser->second;\n//        if(sprite.getGlobalBounds().intersects(map_window))\n//        {\n//            window.draw(sprite);\n//        }\n//    }\n//\n//}\n//\n//shared_ptr<Fadeout> Sector::generateFadeout()\n//{\n//    shared_ptr<Fadeout> new_fadeout = make_shared<Fadeout>();\n//\n//   // new_fadeout->background = make_shared<Sprite>(background);\n//    for(map<string, shared_ptr<Floor> >::iterator parser = floors.begin(); parser!=floors.end(); parser++)\n//    {\n//        shared_ptr<Entity> e = shared_ptr<Entity>(parser->second);\n//        new_fadeout->sprites.insert(make_shared<Sprite>(e->sprite));\n//    }\n//    for(map<string, shared_ptr<Entity> >::iterator parser = ents.begin(); parser!=ents.end(); parser++)\n//    {\n//        shared_ptr<Entity> e = parser->second;\n//        new_fadeout->sprites.insert(make_shared<Sprite>(e->sprite));\n//    }\n//\n//    return new_fadeout;\n//}\n//\n//void sendToTheDeep(shared_ptr<Entity> start_entity)\n//{\n//    set<shared_ptr<Entity> > leaving_group;\n//    set<string> leaving_bonds;\n//    set<string> leaving_connectors;\n//\n//    set<shared_ptr<Entity> > new_leavers;\n//    new_leavers.insert(start_entity);\n//\n//    while(true) //collect a set of leaving ents in leaving_group\n//    {\n//        if(new_leavers.size()==0){break;}\n//\n//        set<shared_ptr<Entity> > pending_inserts;\n//        for(set<shared_ptr<Entity> >::iterator parser = new_leavers.begin(); parser!=new_leavers.end(); parser++)\n//        {\n//            shared_ptr<Entity> current_ent = *parser;\n//            //add all adjoined entitites\n//            for(set<string>::iterator w_floor = current_ent->floors.begin(); w_floor!=current_ent->floors.end(); w_floor++)//add floors being stood on\n//            {\n//                shared_ptr<Entity> floor = getEnt(*w_floor);\n//                if(leaving_group.count(floor)==0 and new_leavers.count(floor)==0)\n//                {\n//                    pending_inserts.insert(floor);\n//                }\n//            }\n//            for(map<string, shared_ptr<Entity> >::iterator c_ent = server.ents.begin(); c_ent!=server.ents.end(); c_ent++)\n//            {\n//                if(leaving_group.count(c_ent->second)!=0 or new_leavers.count(c_ent->second)!=0)\n//                {\n//                    continue;\n//                }\n//                Vector2f dist = c_ent->second->coords-current_ent->coords;\n//                double h = hypot(dist.x,dist.y);\n//                if(h<=c_ent->second->collision_radius+current_ent->collision_radius+100)\n//                {\n//                     pending_inserts.insert(c_ent->second);\n//                }\n//            }\n//            for(map<string, shared_ptr<Floor> >::iterator c_floor = server.floors.begin(); c_floor!=server.floors.end(); c_floor++)\n//            {\n//                if(leaving_group.count(c_floor->second)!=0 or new_leavers.count(c_floor->second)!=0)\n//                {\n//                    continue;\n//                }\n//                Vector2f dist = c_floor->second->coords-current_ent->coords;\n//                double h = hypot(dist.x,dist.y);\n//                if(h<=c_floor->second->collision_radius+current_ent->collision_radius+100)\n//                {\n//                     pending_inserts.insert(c_floor->second);\n//                }\n//            }\n//            if(current_ent->bonded)//add ents bonded to this one\n//            {\n//                leaving_bonds.insert(current_ent->bond);\n//                shared_ptr<Bond> current_bond = server.bonds[current_ent->bond];\n//                for(vector<weak_ptr<Entity> >::iterator w_ent = current_bond->members.begin(); w_ent!=current_bond->members.end(); w_ent++)\n//                {\n//                    shared_ptr<Entity> ent = w_ent->lock();\n//                    if(leaving_group.count(ent)==0 and new_leavers.count(ent)==0)\n//                    {\n//                        pending_inserts.insert(ent);\n//                    }\n//                }\n//            }\n//        }\n//        leaving_group.insert(new_leavers.begin(),new_leavers.end());\n//        new_leavers = pending_inserts;\n//        pending_inserts.clear();\n//    }\n//    for(map<string,shared_ptr<Connector> >::iterator parser = server.connectors.begin(); parser!=server.connectors.end(); parser++)\n//    {\n//        shared_ptr<Entity> A = parser->second->A.lock();\n//        shared_ptr<Entity> B = parser->second->B.lock();\n//        if(leaving_group.count(A)!=0 or leaving_group.count(A)!=0)\n//        {\n//            leaving_connectors.insert(parser->first);\n//        }\n//    }\n//\n//    for(set<shared_ptr<Entity> >::iterator parser = leaving_group.begin(); parser!=leaving_group.end(); parser++)\n//    {\n//        //if(server.collision_grid.limbo.count(parser->get())==0 and server.floor_grid.limbo.count(parser->get())==0)\n//       // {\n//         //   //not all leaving members are out of the sector yet\n//        //    return;\n//       // }\n//    }\n//    ////////////ACTUALLY SEND THE SET INTO DEEP SPACE//////////////////////////\n//\n//\n//\n//\n//\n//    weak_ptr<Entity> farthest;\n//    double farthest_dist = 0;\n//    for(set<shared_ptr<Entity> >::iterator parser = leaving_group.begin(); parser!=leaving_group.end(); parser++)\n//    {\n//        shared_ptr<Entity> current_ent = *parser;\n//        double h = hypot(current_ent->coords.x,current_ent->coords.y);\n//        if(h>farthest_dist)\n//        {\n//            farthest = current_ent;\n//            farthest_dist = h;\n//        }\n//    }\n//\n//    double radius = 0;\n//    for(set<shared_ptr<Entity> >::iterator parser = leaving_group.begin(); parser!=leaving_group.end(); parser++)\n//    {\n//        shared_ptr<Entity> current_ent = *parser;\n//        double h = hypot(current_ent->coords.x - farthest.lock()->coords.x,current_ent->coords.y - farthest.lock()->coords.y);\n//        if(h>radius)\n//        {\n//            radius = h;\n//        }\n//    }\n//    radius += 200;\n//\n//    string new_sector_id = createUniqueId();\n//    shared_ptr<Sector> new_sector = make_shared<Sector>(new_sector_id, radius, \"bg_deep_space\");\n//    new_sector->universe_coords = farthest.lock()->getUniverseCoords();\n//    new_sector->deep = true;\n//    new_sector->anchor_ent = start_entity->id;\n//    world.sectors[new_sector_id] = new_sector;\n//\n//\n//    for(set<shared_ptr<Entity> >::iterator parser = leaving_group.begin(); parser!=leaving_group.end(); parser++)\n//    {\n//        shared_ptr<Entity> current_ent = *parser;\n//        current_ent->coords = current_ent->getUniverseCoords()-new_sector->universe_coords;\n//    }\n//    for(set<shared_ptr<Entity> >::iterator parser = leaving_group.begin(); parser!=leaving_group.end(); parser++)\n//    {\n//        shared_ptr<Entity> current_ent = *parser;\n//        for(map<int,string>::iterator item_parser = current_ent->contents.begin(); item_parser!=current_ent->contents.end(); item_parser++)\n//        {\n//            new_sector->items[item_parser->second] = server.items[item_parser->second];\n//        }\n//        if(current_ent->classification==FLOOR)\n//        {\n//            new_sector->floors[current_ent->id] = server.floors[current_ent->id];\n//        }\n//        else\n//        {\n//            if(current_ent->classification==PLAYER)\n//            {\n//                new_sector->people[current_ent->id] = server.people[current_ent->id];\n//            }\n//            if(current_ent->classification==CONTAINER)\n//            {\n//                new_sector->containers[current_ent->id] = server.containers[current_ent->id];\n//            }\n//            if(current_ent->classification==MACHINE)\n//            {\n//                new_sector->machines[current_ent->id] = server.machines[current_ent->id];\n//            }\n//            new_sector->ents[current_ent->id] = server.ents[current_ent->id];\n//        }\n//    }\n//    for(set<string>::iterator parser = leaving_bonds.begin(); parser!= leaving_bonds.end(); parser++)\n//    {\n//        server.bonds[*parser]->center = server.bonds[*parser]->getUniverseCoords()-new_sector->universe_coords;\n//        new_sector->bonds[*parser] = server.bonds[*parser];\n//    }\n//    for(set<string>::iterator parser = leaving_connectors.begin(); parser!=leaving_connectors.end(); parser++)\n//    {\n//        new_sector->connectors[*parser] = server.connectors[*parser];\n//    }\n//\n//    ///////REMOVE FROM THIS SECTOR/////////\n//    for(set<shared_ptr<Entity> >::iterator parser = leaving_group.begin(); parser!=leaving_group.end(); parser++)\n//    {\n//        shared_ptr<Entity> current_ent = *parser;\n//        for(map<int,string>::iterator item_parser = current_ent->contents.begin(); item_parser!=current_ent->contents.end(); item_parser++)\n//        {\n//            server.items.erase(item_parser->second);\n//        }\n//        if(current_ent->classification==FLOOR)\n//        {\n//            server.floors.erase(current_ent->id);\n//        }\n//        else\n//        {\n//            if(current_ent->classification==PLAYER)\n//            {\n//                server.people.erase(current_ent->id);\n//            }\n//            if(current_ent->classification==CONTAINER)\n//            {\n//                server.containers.erase(current_ent->id);\n//            }\n//            if(current_ent->classification==MACHINE)\n//            {\n//                server.machines.erase(current_ent->id);\n//            }\n//            server.ents.erase(current_ent->id);\n//        }\n//    }\n//    for(set<string>::iterator parser = leaving_bonds.begin(); parser!= leaving_bonds.end(); parser++)\n//    {\n//        server.bonds.erase(*parser);\n//    }\n//    for(set<string>::iterator parser = leaving_connectors.begin(); parser!=leaving_connectors.end(); parser++)\n//    {\n//        server.connectors.erase(*parser);\n//    }\n//\n//    shared_ptr<Fadeout> f1 = new_sector->generateFadeout();\n//    f1->convertToUniversal(new_sector->id);\n//    f1->convertToLocal(world.sector);\n//    shared_ptr<Fadeout> f2 = server.generateFadeout();\n//    f2->convertToUniversal(world.sector);\n//    f2->convertToLocal(new_sector->id);\n//    server.fadeouts.insert(f1);\n//    new_sector->fadeouts.insert(f2);\n//\n//\n//    if(server.people.count(server.player_id)==0)\n//    {\n//        server.openSector(new_sector_id);\n//    }\n//\n//\n//}\n",
			"file": "world.cpp",
			"file_size": 138169,
			"file_write_time": 130911671781883021,
			"settings":
			{
				"buffer_size": 135680,
				"line_ending": "Windows"
			}
		},
		{
			"file": "bond.cpp",
			"settings":
			{
				"buffer_size": 13655,
				"line_ending": "Windows"
			}
		},
		{
			"file": "bond.h",
			"settings":
			{
				"buffer_size": 2273,
				"line_ending": "Windows"
			}
		},
		{
			"file": "rope.cpp",
			"settings":
			{
				"buffer_size": 9655,
				"line_ending": "Windows"
			}
		},
		{
			"file": "rope.h",
			"settings":
			{
				"buffer_size": 1393,
				"line_ending": "Windows"
			}
		},
		{
			"file": "floor.cpp",
			"settings":
			{
				"buffer_size": 7989,
				"line_ending": "Windows"
			}
		},
		{
			"file": "collision.cpp",
			"settings":
			{
				"buffer_size": 41830,
				"line_ending": "Windows"
			}
		},
		{
			"file": "player.cpp",
			"settings":
			{
				"buffer_size": 17505,
				"line_ending": "Windows"
			}
		},
		{
			"file": "machines.h",
			"settings":
			{
				"buffer_size": 4349,
				"line_ending": "Windows"
			}
		},
		{
			"file": "machines.cpp",
			"settings":
			{
				"buffer_size": 78670,
				"line_ending": "Windows"
			}
		},
		{
			"file": "entity.cpp",
			"settings":
			{
				"buffer_size": 31973,
				"line_ending": "Windows"
			}
		},
		{
			"file": "saves/index.xml",
			"settings":
			{
				"buffer_size": 46,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/saves/index.xml",
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/saves/root/0_0.xml",
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/saves/blank_space/index.xml",
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/saves/blank_space/0_0.xml",
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/saves/root_platform/0_0.xml",
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/saves/root_platform/index.xml",
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/saves/Game Station 5/0_0.xml",
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/entity.cpp",
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/saves/Station 1/0_0.xml",
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/info.xml",
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/container.h",
		"/C/Users/Richard/Desktop/C++ Work/Deep Server/container.cpp",
		"/C/Users/Richard/Desktop/Fleet/ui.cpp",
		"/C/Users/Richard/Desktop/Fleet/main.h",
		"/C/Users/Richard/Desktop/Fleet/main.cpp",
		"/C/Users/Richard/Desktop/Fleet/ui.h",
		"/C/Users/Richard/Desktop/Fleet/textures.xml",
		"/C/Users/Richard/Desktop/Fleet/util.h",
		"/C/Users/Richard/Desktop/Fleet/util.cpp",
		"/C/Users/Richard/Desktop/Fleet/types.xml",
		"/C/Users/Richard/Desktop/Fleet/makefile",
		"/C/Users/Richard/Desktop/Fleet/round.cpp",
		"/C/Users/Richard/Desktop/Fleet/round.h",
		"/C/Users/Richard/Desktop/Fleet/fonts.xml",
		"/C/Users/Richard/AppData/Roaming/Sublime Text 2/Packages/User/XML.sublime-settings",
		"/C/Users/Richard/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/Richard/Desktop/TestFleet/types.xml",
		"/C/Users/Richard/Desktop/TestFleet/textures.xml",
		"/C/Users/Richard/Documents/DeepRp/saves/World1/a.xml",
		"/C/Users/Richard/Documents/DeepRp/entity.h",
		"/C/Users/Richard/Documents/DeepRp/main.h",
		"/C/Users/Richard/Documents/DeepRp/tile.cpp",
		"/C/Users/Richard/Documents/DeepRp/entity.cpp",
		"/C/Users/Richard/Documents/DeepRp/types.xml",
		"/C/Users/Richard/Documents/DeepRp/util.h"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"connectors",
			"blank_space",
			"storage_id",
			"hovering_item",
			"item",
			"storage_id",
			"free_build",
			"!free_build",
			"light",
			"light_boost",
			"\n                ",
			"bound_to_sector",
			"load",
			"loadFromFile",
			"perform",
			"file_menu_open",
			"esc",
			"exc",
			"voltage",
			"Caption",
			"bombar",
			"getMyPerp",
			"getPerpendicularAxis",
			"getVelocity",
			"floor",
			"floors",
			"run",
			"slaved",
			"updateSprite",
			"getPerpen",
			"getRotationalVel",
			"getAngularVelocity",
			"applyImpulse",
			"attached",
			"ropes",
			"apply",
			"k",
			"	\n",
			"CONNECTOR",
			"load",
			"bombard",
			"createAsteroids",
			"font",
			"background",
			"place",
			"view",
			"window.getSize()",
			"sp",
			"cout <<",
			"true",
			"update",
			"cooldown",
			"update numbers",
			"cooldown",
			"update",
			"turn",
			"sprite",
			"cout",
			"}\n",
			"CardGraphic",
			"> ",
			"randomN",
			"int i ",
			"deck",
			"client",
			"linked",
			"calcul",
			"strength",
			"doesSocket",
			"linked.insert",
			"j",
			"a",
			"placeShip",
			"addSocket",
			"calculateSock",
			"2",
			"cout",
			"updateStrengths",
			"send(",
			"cout",
			"send(",
			"calculate",
			"turn",
			"Corvette",
			"score",
			"bbck",
			"a",
			"placed_ships",
			"placed_s",
			"10",
			"hand",
			"setText",
			"Texture",
			"0",
			"window_y=\"512\"",
			"type_index=\"1\"",
			"FTile",
			"Tile",
			"getProperties",
			"Tile",
			"getTileAt",
			">",
			"if(doesTileExistAt(e,s)){",
			"}\n",
			":\n",
			");\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"mp",
			"mp_host",
			"mp",
			"b",
			"back",
			"b",
			"20",
			"dead",
			"deck",
			"setString",
			"Font",
			"window_y=\"1024\"",
			"type_index=\"0\" floor_type_index=\"1\"",
			"Tile",
			"FTile",
			"getTileProperties",
			"Entity",
			"/>"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 24,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "makefile",
					"settings":
					{
						"buffer_size": 3125,
						"regions":
						{
						},
						"selection":
						[
							[
								2778,
								2778
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 630.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "saves/station_a/0_0.xml",
					"settings":
					{
						"buffer_size": 47161,
						"regions":
						{
						},
						"selection":
						[
							[
								29180,
								29180
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11787.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "field.h",
					"settings":
					{
						"buffer_size": 1559,
						"regions":
						{
						},
						"selection":
						[
							[
								1549,
								1549
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 294.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "main.h",
					"settings":
					{
						"buffer_size": 1001,
						"regions":
						{
						},
						"selection":
						[
							[
								1000,
								1000
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 294.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "util.h",
					"settings":
					{
						"buffer_size": 2115,
						"regions":
						{
						},
						"selection":
						[
							[
								1971,
								1971
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 840.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "util.cpp",
					"settings":
					{
						"buffer_size": 9329,
						"regions":
						{
						},
						"selection":
						[
							[
								2696,
								2696
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1260.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "session.cpp",
					"settings":
					{
						"buffer_size": 148990,
						"regions":
						{
						},
						"selection":
						[
							[
								28222,
								28222
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8422.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"settings":
					{
						"buffer_size": 45494,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										208,
										219
									],
									[
										438,
										449
									],
									[
										580,
										591
									],
									[
										890,
										900
									],
									[
										1082,
										1092
									],
									[
										1421,
										1431
									],
									[
										1728,
										1738
									],
									[
										1742,
										1752
									],
									[
										1884,
										1894
									],
									[
										2077,
										2087
									],
									[
										2285,
										2295
									],
									[
										2700,
										2710
									],
									[
										2928,
										2938
									],
									[
										3196,
										3206
									],
									[
										3334,
										3344
									],
									[
										3428,
										3438
									],
									[
										3666,
										3676
									],
									[
										3819,
										3829
									],
									[
										4045,
										4055
									],
									[
										4088,
										4098
									],
									[
										4101,
										4111
									],
									[
										4201,
										4211
									],
									[
										4368,
										4378
									],
									[
										4582,
										4592
									],
									[
										4749,
										4759
									],
									[
										4762,
										4772
									],
									[
										4866,
										4876
									],
									[
										4972,
										4982
									],
									[
										5097,
										5107
									],
									[
										5292,
										5302
									],
									[
										5490,
										5500
									],
									[
										5676,
										5686
									],
									[
										5900,
										5910
									],
									[
										6019,
										6029
									],
									[
										6243,
										6253
									],
									[
										6460,
										6470
									],
									[
										6757,
										6767
									],
									[
										6952,
										6962
									],
									[
										7402,
										7412
									],
									[
										7448,
										7458
									],
									[
										7686,
										7696
									],
									[
										7768,
										7778
									],
									[
										8011,
										8021
									],
									[
										8093,
										8103
									],
									[
										8480,
										8490
									],
									[
										8528,
										8538
									],
									[
										9019,
										9029
									],
									[
										9067,
										9077
									],
									[
										9475,
										9485
									],
									[
										9496,
										9506
									],
									[
										9643,
										9653
									],
									[
										9664,
										9674
									],
									[
										9810,
										9820
									],
									[
										9831,
										9841
									],
									[
										9974,
										9984
									],
									[
										9987,
										9997
									],
									[
										10130,
										10140
									],
									[
										10143,
										10153
									],
									[
										10285,
										10295
									],
									[
										10298,
										10308
									],
									[
										10441,
										10451
									],
									[
										10454,
										10464
									],
									[
										10597,
										10607
									],
									[
										10610,
										10620
									],
									[
										10752,
										10762
									],
									[
										10765,
										10775
									],
									[
										10907,
										10917
									],
									[
										10920,
										10930
									],
									[
										11062,
										11072
									],
									[
										11075,
										11085
									],
									[
										11218,
										11228
									],
									[
										11231,
										11241
									],
									[
										11373,
										11383
									],
									[
										11386,
										11396
									],
									[
										11529,
										11539
									],
									[
										11542,
										11552
									],
									[
										11684,
										11694
									],
									[
										11697,
										11707
									],
									[
										11840,
										11850
									],
									[
										11853,
										11863
									],
									[
										11996,
										12006
									],
									[
										12009,
										12019
									],
									[
										12152,
										12162
									],
									[
										12165,
										12175
									],
									[
										12308,
										12318
									],
									[
										12321,
										12331
									],
									[
										12466,
										12476
									],
									[
										12479,
										12489
									],
									[
										12624,
										12634
									],
									[
										12637,
										12647
									],
									[
										12782,
										12792
									],
									[
										12795,
										12805
									],
									[
										12940,
										12950
									],
									[
										12953,
										12963
									],
									[
										13096,
										13106
									],
									[
										13109,
										13119
									],
									[
										13252,
										13262
									],
									[
										13265,
										13275
									],
									[
										13408,
										13418
									],
									[
										13421,
										13431
									],
									[
										13564,
										13574
									],
									[
										13577,
										13587
									],
									[
										13722,
										13732
									],
									[
										13735,
										13745
									],
									[
										13878,
										13888
									],
									[
										13891,
										13901
									],
									[
										14028,
										14038
									],
									[
										14041,
										14051
									],
									[
										14178,
										14188
									],
									[
										14191,
										14201
									],
									[
										14328,
										14338
									],
									[
										14341,
										14351
									],
									[
										14482,
										14492
									],
									[
										14495,
										14505
									],
									[
										14638,
										14648
									],
									[
										14651,
										14661
									],
									[
										14794,
										14804
									],
									[
										14807,
										14817
									],
									[
										14950,
										14960
									],
									[
										14963,
										14973
									],
									[
										15109,
										15119
									],
									[
										15122,
										15132
									],
									[
										15263,
										15273
									],
									[
										15276,
										15286
									],
									[
										15416,
										15426
									],
									[
										15429,
										15439
									],
									[
										15570,
										15580
									],
									[
										15583,
										15593
									],
									[
										15724,
										15734
									],
									[
										15737,
										15747
									],
									[
										15878,
										15888
									],
									[
										15891,
										15901
									],
									[
										16032,
										16042
									],
									[
										16045,
										16055
									],
									[
										16186,
										16196
									],
									[
										16199,
										16209
									],
									[
										16339,
										16349
									],
									[
										16352,
										16362
									],
									[
										16631,
										16641
									],
									[
										16652,
										16662
									],
									[
										16799,
										16809
									],
									[
										16820,
										16830
									],
									[
										16966,
										16976
									],
									[
										16987,
										16997
									],
									[
										17130,
										17140
									],
									[
										17143,
										17153
									],
									[
										17286,
										17296
									],
									[
										17299,
										17309
									],
									[
										17441,
										17451
									],
									[
										17454,
										17464
									],
									[
										17597,
										17607
									],
									[
										17610,
										17620
									],
									[
										17753,
										17763
									],
									[
										17766,
										17776
									],
									[
										17908,
										17918
									],
									[
										17921,
										17931
									],
									[
										18063,
										18073
									],
									[
										18076,
										18086
									],
									[
										18218,
										18228
									],
									[
										18231,
										18241
									],
									[
										18374,
										18384
									],
									[
										18387,
										18397
									],
									[
										18529,
										18539
									],
									[
										18542,
										18552
									],
									[
										18685,
										18695
									],
									[
										18698,
										18708
									],
									[
										18840,
										18850
									],
									[
										18853,
										18863
									],
									[
										18996,
										19006
									],
									[
										19009,
										19019
									],
									[
										19152,
										19162
									],
									[
										19165,
										19175
									],
									[
										19308,
										19318
									],
									[
										19321,
										19331
									],
									[
										19464,
										19474
									],
									[
										19477,
										19487
									],
									[
										19622,
										19632
									],
									[
										19635,
										19645
									],
									[
										19780,
										19790
									],
									[
										19793,
										19803
									],
									[
										19938,
										19948
									],
									[
										19951,
										19961
									],
									[
										20096,
										20106
									],
									[
										20109,
										20119
									],
									[
										20252,
										20262
									],
									[
										20265,
										20275
									],
									[
										20408,
										20418
									],
									[
										20421,
										20431
									],
									[
										20564,
										20574
									],
									[
										20577,
										20587
									],
									[
										20720,
										20730
									],
									[
										20733,
										20743
									],
									[
										20878,
										20888
									],
									[
										20891,
										20901
									],
									[
										21034,
										21044
									],
									[
										21047,
										21057
									],
									[
										21184,
										21194
									],
									[
										21197,
										21207
									],
									[
										21334,
										21344
									],
									[
										21347,
										21357
									],
									[
										21484,
										21494
									],
									[
										21497,
										21507
									],
									[
										21638,
										21648
									],
									[
										21651,
										21661
									],
									[
										21794,
										21804
									],
									[
										21807,
										21817
									],
									[
										21950,
										21960
									],
									[
										21963,
										21973
									],
									[
										22106,
										22116
									],
									[
										22119,
										22129
									],
									[
										22265,
										22275
									],
									[
										22278,
										22288
									],
									[
										22419,
										22429
									],
									[
										22432,
										22442
									],
									[
										22572,
										22582
									],
									[
										22585,
										22595
									],
									[
										22726,
										22736
									],
									[
										22739,
										22749
									],
									[
										22880,
										22890
									],
									[
										22893,
										22903
									],
									[
										23034,
										23044
									],
									[
										23047,
										23057
									],
									[
										23188,
										23198
									],
									[
										23201,
										23211
									],
									[
										23342,
										23352
									],
									[
										23355,
										23365
									],
									[
										23495,
										23505
									],
									[
										23508,
										23518
									],
									[
										23916,
										23926
									],
									[
										24144,
										24154
									],
									[
										24412,
										24422
									],
									[
										24550,
										24560
									],
									[
										24644,
										24654
									],
									[
										24882,
										24892
									],
									[
										25035,
										25045
									],
									[
										25261,
										25271
									],
									[
										25304,
										25314
									],
									[
										25317,
										25327
									],
									[
										25417,
										25427
									],
									[
										25584,
										25594
									],
									[
										25798,
										25808
									],
									[
										25965,
										25975
									],
									[
										25978,
										25988
									],
									[
										26082,
										26092
									],
									[
										26188,
										26198
									],
									[
										26313,
										26323
									],
									[
										26508,
										26518
									],
									[
										26706,
										26716
									],
									[
										26892,
										26902
									],
									[
										27116,
										27126
									],
									[
										27235,
										27245
									],
									[
										27459,
										27469
									],
									[
										27676,
										27686
									],
									[
										27973,
										27983
									],
									[
										28168,
										28178
									],
									[
										28618,
										28628
									],
									[
										28664,
										28674
									],
									[
										28902,
										28912
									],
									[
										28984,
										28994
									],
									[
										29227,
										29237
									],
									[
										29309,
										29319
									],
									[
										29696,
										29706
									],
									[
										29744,
										29754
									],
									[
										30235,
										30245
									],
									[
										30283,
										30293
									],
									[
										30691,
										30701
									],
									[
										30712,
										30722
									],
									[
										30859,
										30869
									],
									[
										30880,
										30890
									],
									[
										31026,
										31036
									],
									[
										31047,
										31057
									],
									[
										31190,
										31200
									],
									[
										31203,
										31213
									],
									[
										31346,
										31356
									],
									[
										31359,
										31369
									],
									[
										31501,
										31511
									],
									[
										31514,
										31524
									],
									[
										31657,
										31667
									],
									[
										31670,
										31680
									],
									[
										31813,
										31823
									],
									[
										31826,
										31836
									],
									[
										31968,
										31978
									],
									[
										31981,
										31991
									],
									[
										32123,
										32133
									],
									[
										32136,
										32146
									],
									[
										32278,
										32288
									],
									[
										32291,
										32301
									],
									[
										32434,
										32444
									],
									[
										32447,
										32457
									],
									[
										32589,
										32599
									],
									[
										32602,
										32612
									],
									[
										32745,
										32755
									],
									[
										32758,
										32768
									],
									[
										32900,
										32910
									],
									[
										32913,
										32923
									],
									[
										33056,
										33066
									],
									[
										33069,
										33079
									],
									[
										33212,
										33222
									],
									[
										33225,
										33235
									],
									[
										33368,
										33378
									],
									[
										33381,
										33391
									],
									[
										33524,
										33534
									],
									[
										33537,
										33547
									],
									[
										33682,
										33692
									],
									[
										33695,
										33705
									],
									[
										33840,
										33850
									],
									[
										33853,
										33863
									],
									[
										33998,
										34008
									],
									[
										34011,
										34021
									],
									[
										34156,
										34166
									],
									[
										34169,
										34179
									],
									[
										34312,
										34322
									],
									[
										34325,
										34335
									],
									[
										34468,
										34478
									],
									[
										34481,
										34491
									],
									[
										34624,
										34634
									],
									[
										34637,
										34647
									],
									[
										34780,
										34790
									],
									[
										34793,
										34803
									],
									[
										34938,
										34948
									],
									[
										34951,
										34961
									],
									[
										35094,
										35104
									],
									[
										35107,
										35117
									],
									[
										35244,
										35254
									],
									[
										35257,
										35267
									],
									[
										35394,
										35404
									],
									[
										35407,
										35417
									],
									[
										35544,
										35554
									],
									[
										35557,
										35567
									],
									[
										35698,
										35708
									],
									[
										35711,
										35721
									],
									[
										35854,
										35864
									],
									[
										35867,
										35877
									],
									[
										36010,
										36020
									],
									[
										36023,
										36033
									],
									[
										36166,
										36176
									],
									[
										36179,
										36189
									],
									[
										36325,
										36335
									],
									[
										36338,
										36348
									],
									[
										36479,
										36489
									],
									[
										36492,
										36502
									],
									[
										36632,
										36642
									],
									[
										36645,
										36655
									],
									[
										36786,
										36796
									],
									[
										36799,
										36809
									],
									[
										36940,
										36950
									],
									[
										36953,
										36963
									],
									[
										37094,
										37104
									],
									[
										37107,
										37117
									],
									[
										37248,
										37258
									],
									[
										37261,
										37271
									],
									[
										37402,
										37412
									],
									[
										37415,
										37425
									],
									[
										37555,
										37565
									],
									[
										37568,
										37578
									],
									[
										37847,
										37857
									],
									[
										37868,
										37878
									],
									[
										38015,
										38025
									],
									[
										38036,
										38046
									],
									[
										38182,
										38192
									],
									[
										38203,
										38213
									],
									[
										38346,
										38356
									],
									[
										38359,
										38369
									],
									[
										38502,
										38512
									],
									[
										38515,
										38525
									],
									[
										38657,
										38667
									],
									[
										38670,
										38680
									],
									[
										38813,
										38823
									],
									[
										38826,
										38836
									],
									[
										38969,
										38979
									],
									[
										38982,
										38992
									],
									[
										39124,
										39134
									],
									[
										39137,
										39147
									],
									[
										39279,
										39289
									],
									[
										39292,
										39302
									],
									[
										39434,
										39444
									],
									[
										39447,
										39457
									],
									[
										39590,
										39600
									],
									[
										39603,
										39613
									],
									[
										39745,
										39755
									],
									[
										39758,
										39768
									],
									[
										39901,
										39911
									],
									[
										39914,
										39924
									],
									[
										40056,
										40066
									],
									[
										40069,
										40079
									],
									[
										40212,
										40222
									],
									[
										40225,
										40235
									],
									[
										40368,
										40378
									],
									[
										40381,
										40391
									],
									[
										40524,
										40534
									],
									[
										40537,
										40547
									],
									[
										40680,
										40690
									],
									[
										40693,
										40703
									],
									[
										40838,
										40848
									],
									[
										40851,
										40861
									],
									[
										40996,
										41006
									],
									[
										41009,
										41019
									],
									[
										41154,
										41164
									],
									[
										41167,
										41177
									],
									[
										41312,
										41322
									],
									[
										41325,
										41335
									],
									[
										41468,
										41478
									],
									[
										41481,
										41491
									],
									[
										41624,
										41634
									],
									[
										41637,
										41647
									],
									[
										41780,
										41790
									],
									[
										41793,
										41803
									],
									[
										41936,
										41946
									],
									[
										41949,
										41959
									],
									[
										42094,
										42104
									],
									[
										42107,
										42117
									],
									[
										42250,
										42260
									],
									[
										42263,
										42273
									],
									[
										42400,
										42410
									],
									[
										42413,
										42423
									],
									[
										42550,
										42560
									],
									[
										42563,
										42573
									],
									[
										42700,
										42710
									],
									[
										42713,
										42723
									],
									[
										42854,
										42864
									],
									[
										42867,
										42877
									],
									[
										43010,
										43020
									],
									[
										43023,
										43033
									],
									[
										43166,
										43176
									],
									[
										43179,
										43189
									],
									[
										43322,
										43332
									],
									[
										43335,
										43345
									],
									[
										43481,
										43491
									],
									[
										43494,
										43504
									],
									[
										43635,
										43645
									],
									[
										43648,
										43658
									],
									[
										43788,
										43798
									],
									[
										43801,
										43811
									],
									[
										43942,
										43952
									],
									[
										43955,
										43965
									],
									[
										44096,
										44106
									],
									[
										44109,
										44119
									],
									[
										44250,
										44260
									],
									[
										44263,
										44273
									],
									[
										44404,
										44414
									],
									[
										44417,
										44427
									],
									[
										44558,
										44568
									],
									[
										44571,
										44581
									],
									[
										44711,
										44721
									],
									[
										44724,
										44734
									],
									[
										45007,
										45018
									],
									[
										45177,
										45188
									],
									[
										45375,
										45386
									],
									[
										45420,
										45431
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								44846,
								44846
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 5,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 15624.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "info.xml",
					"settings":
					{
						"buffer_size": 16304,
						"regions":
						{
						},
						"selection":
						[
							[
								12644,
								12644
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4690.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "main.cpp",
					"settings":
					{
						"buffer_size": 4331,
						"regions":
						{
						},
						"selection":
						[
							[
								4225,
								4225
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1470.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "session.h",
					"settings":
					{
						"buffer_size": 1604,
						"regions":
						{
						},
						"selection":
						[
							[
								524,
								524
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 294.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "entity.h",
					"settings":
					{
						"buffer_size": 4986,
						"regions":
						{
						},
						"selection":
						[
							[
								3301,
								3301
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 378.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "world.h",
					"settings":
					{
						"buffer_size": 4224,
						"regions":
						{
						},
						"selection":
						[
							[
								1682,
								1682
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 532.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "world.cpp",
					"settings":
					{
						"buffer_size": 135680,
						"regions":
						{
						},
						"selection":
						[
							[
								29523,
								29524
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 155.0,
						"translation.y": 9864.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "bond.cpp",
					"settings":
					{
						"buffer_size": 13655,
						"regions":
						{
						},
						"selection":
						[
							[
								10146,
								10146
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6046.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "bond.h",
					"settings":
					{
						"buffer_size": 2273,
						"regions":
						{
						},
						"selection":
						[
							[
								294,
								294
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "rope.cpp",
					"settings":
					{
						"buffer_size": 9655,
						"regions":
						{
						},
						"selection":
						[
							[
								1356,
								1356
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "rope.h",
					"settings":
					{
						"buffer_size": 1393,
						"regions":
						{
						},
						"selection":
						[
							[
								592,
								592
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "floor.cpp",
					"settings":
					{
						"buffer_size": 7989,
						"regions":
						{
						},
						"selection":
						[
							[
								4521,
								4521
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1638.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "collision.cpp",
					"settings":
					{
						"buffer_size": 41830,
						"regions":
						{
						},
						"selection":
						[
							[
								7834,
								7834
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5034.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "player.cpp",
					"settings":
					{
						"buffer_size": 17505,
						"regions":
						{
						},
						"selection":
						[
							[
								16721,
								16721
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5680.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "machines.h",
					"settings":
					{
						"buffer_size": 4349,
						"regions":
						{
						},
						"selection":
						[
							[
								3998,
								3998
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2436.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "machines.cpp",
					"settings":
					{
						"buffer_size": 78670,
						"regions":
						{
						},
						"selection":
						[
							[
								20753,
								20753
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7036.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "entity.cpp",
					"settings":
					{
						"buffer_size": 31973,
						"regions":
						{
						},
						"selection":
						[
							[
								17733,
								17733
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7778.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "saves/index.xml",
					"settings":
					{
						"buffer_size": 46,
						"regions":
						{
						},
						"selection":
						[
							[
								46,
								46
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 208.0,
	"status_bar_visible": true
}
